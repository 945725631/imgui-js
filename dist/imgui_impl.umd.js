(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ImGui_Impl = {}));
}(this, (function (exports) { 'use strict';

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	function resolve() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : '/';

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	}
	// path.normalize(path)
	// posix version
	function normalize(path) {
	  var isPathAbsolute = isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isPathAbsolute).join('/');

	  if (!path && !isPathAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isPathAbsolute ? '/' : '') + path;
	}
	// posix version
	function isAbsolute(path) {
	  return path.charAt(0) === '/';
	}

	// posix version
	function join() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	}


	// path.relative(from, to)
	// posix version
	function relative(from, to) {
	  from = resolve(from).substr(1);
	  to = resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	}

	var sep = '/';
	var delimiter = ':';

	function dirname(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	}

	function basename(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	}


	function extname(path) {
	  return splitPath(path)[3];
	}
	var require$$0 = {
	  extname: extname,
	  basename: basename,
	  dirname: dirname,
	  sep: sep,
	  delimiter: delimiter,
	  relative: relative,
	  join: join,
	  isAbsolute: isAbsolute,
	  normalize: normalize,
	  resolve: resolve
	};
	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b' ?
	    function (str, start, len) { return str.substr(start, len) } :
	    function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	var require$$1 = {};

	var bindImgui = createCommonjsModule(function (module, exports) {
	var Module = (function() {
	  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
	  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
	  return (
	function(Module) {
	  Module = Module || {};

	var Module=typeof Module!=="undefined"?Module:{};var readyPromiseResolve,readyPromiseReject;Module["ready"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject;});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key];}}var arguments_=[];var thisProgram="./this.program";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof process.versions==="object"&&typeof process.versions.node==="string";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readBinary;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require$$0.dirname(scriptDirectory)+"/";}else {scriptDirectory=__dirname+"/";}read_=function shell_read(filename,binary){var ret=tryParseAsDataURI(filename);if(ret){return binary?ret:ret.toString()}if(!nodeFS)nodeFS=require$$1;if(!nodePath)nodePath=require$$0;filename=nodePath["normalize"](filename);return nodeFS["readFileSync"](filename,binary?null:"utf8")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret);}assert(ret.buffer);return ret};if(process["argv"].length>1){thisProgram=process["argv"][1].replace(/\\/g,"/");}arguments_=process["argv"].slice(2);process["on"]("uncaughtException",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process["on"]("unhandledRejection",abort);quit_=function(status){process["exit"](status);};Module["inspect"]=function(){return "[Emscripten Module object]"};}else if(ENVIRONMENT_IS_SHELL){if(typeof read!="undefined"){read_=function shell_read(f){var data=tryParseAsDataURI(f);if(data){return intArrayToString(data)}return read(f)};}readBinary=function readBinary(f){var data;data=tryParseAsDataURI(f);if(data){return data}if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){arguments_=scriptArgs;}else if(typeof arguments!="undefined"){arguments_=arguments;}if(typeof quit==="function"){quit_=function(status){quit(status);};}if(typeof print!=="undefined"){if(typeof console==="undefined")console={};console.log=print;console.warn=console.error=typeof printErr!=="undefined"?printErr:print;}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href;}else if(document.currentScript){scriptDirectory=document.currentScript.src;}if(_scriptDir){scriptDirectory=_scriptDir;}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1);}else {scriptDirectory="";}{read_=function shell_read(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}};}}}else;var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key];}}moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime;if(Module["noExitRuntime"])noExitRuntime=Module["noExitRuntime"];if(typeof WebAssembly!=="object"){abort("no native wasm support detected");}var wasmMemory;var wasmTable=new WebAssembly.Table({"initial":926,"maximum":926,"element":"anyfunc"});var ABORT=false;function assert(condition,text){if(!condition){abort("Assertion failed: "+text);}}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else {var str="";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2;}else {u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63;}if(u0<65536){str+=String.fromCharCode(u0);}else {var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023);}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023;}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u;}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63;}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63;}else {if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63;}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4;}return len}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function UTF16ToString(ptr,maxBytesToRead){var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder){return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr))}else {var i=0;var str="";while(1){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0||i==maxBytesToRead/2)return str;++i;str+=String.fromCharCode(codeUnit);}}}function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647;}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2;}HEAP16[outPtr>>1]=0;return outPtr-startPtr}function lengthBytesUTF16(str){return str.length*2}function UTF32ToString(ptr,maxBytesToRead){var i=0;var str="";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023);}else {str+=String.fromCharCode(utf32);}}return str}function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647;}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023;}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4;}return len}var WASM_PAGE_SIZE=65536;var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf);}var INITIAL_INITIAL_MEMORY=Module["INITIAL_MEMORY"]||16777216;if(Module["wasmMemory"]){wasmMemory=Module["wasmMemory"];}else {wasmMemory=new WebAssembly.Memory({"initial":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,"maximum":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE});}if(wasmMemory){buffer=wasmMemory.buffer;}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift());}}callRuntimeCallbacks(__ATPRERUN__);}function initRuntime(){callRuntimeCallbacks(__ATINIT__);}function preMain(){callRuntimeCallbacks(__ATMAIN__);}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift());}}callRuntimeCallbacks(__ATPOSTRUN__);}function addOnPreRun(cb){__ATPRERUN__.unshift(cb);}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb);}var runDependencies=0;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}if(runDependencies==0){if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback();}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};function abort(what){if(Module["onAbort"]){Module["onAbort"](what);}what+="";err(what);ABORT=true;what="abort("+what+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var fileURIPrefix="file://";function isFileURI(filename){return hasPrefix(filename,fileURIPrefix)}var wasmBinaryFile="data:application/octet-stream;base64,";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile);}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(wasmBinaryFile);if(binary){return binary}if(readBinary){return readBinary(wasmBinaryFile)}else {throw "both async and sync fetching of the wasm failed"}}catch(err){abort(err);}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw "failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary()})}return Promise.resolve().then(getBinary)}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;removeRunDependency();}addRunDependency();function receiveInstantiatedSource(output){receiveInstance(output["instance"]);}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason);})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch==="function"){fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(receiveInstantiatedSource)})});}else {return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync();return {}}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback(Module);continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){wasmTable.get(func)();}else {wasmTable.get(func)(callback.arg);}}else {func(callback.arg===undefined?null:callback.arg);}}}function dynCallLegacy(sig,ptr,args){if(args&&args.length){return Module["dynCall_"+sig].apply(null,[ptr].concat(args))}return Module["dynCall_"+sig].call(null,ptr)}function dynCall(sig,ptr,args){if(sig.indexOf("j")!=-1){return dynCallLegacy(sig,ptr,args)}return wasmTable.get(ptr).apply(null,args)}var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function ___cxa_allocate_exception(size){return _malloc(size+ExceptionInfoAttrs.SIZE)+ExceptionInfoAttrs.SIZE}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-ExceptionInfoAttrs.SIZE;this.set_type=function(type){HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]=type;};this.get_type=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]=destructor;};this.get_destructor=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=refcount;};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]=caught;};this.get_caught=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]=rethrown;};this.get_rethrown=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]!=0};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false);};this.add_ref=function(){var value=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=value+1;};this.release_ref=function(){var prev=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=prev-1;return prev===1};}function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);throw ptr}var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0;}else {buffer.push(curr);}},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},get64:function(low,high){return low}};function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs;}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i);}embind_charCodes=codes;}var embind_charCodes=undefined;function readLatin1String(ptr){var ret="";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]];}return ret}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return "_unknown"}name=name.replace(/[^a-zA-Z0-9_]/g,"$");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return "_"+name}else {return name}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function("body","return function "+name+"() {\n"+'    "use strict";'+"    return body.apply(this, arguments);\n"+"};\n")(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,"");}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else {return this.name+": "+this.message}};return errorClass}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes;});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError("Mismatched type converter count");}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i]);}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach(function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt];}else {unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[];}awaitingDependencies[dt].push(function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters);}});}});if(0===unregisteredTypes.length){onComplete(typeConverters);}}function registerType(rawType,registeredInstance,options){options=options||{};if(!("argPackAdvance"in registeredInstance)){throw new TypeError("registerType registeredInstance requires argPackAdvance")}var name=registeredInstance.name;if(!rawType){throwBindingError('type "'+name+'" must have a positive integer typeid pointer');}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else {throwBindingError("Cannot register type '"+name+"' twice");}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(function(cb){cb();});}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(wt){return !!wt},"toWireType":function(destructors,o){return o?trueValue:falseValue},"argPackAdvance":8,"readValueFromPointer":function(pointer){var heap;if(size===1){heap=HEAP8;}else if(size===2){heap=HEAP16;}else if(size===4){heap=HEAP32;}else {throw new TypeError("Unknown boolean type size: "+name)}return this["fromWireType"](heap[pointer>>shift])},destructorFunction:null});}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass;}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass;}return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return {count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+" instance already deleted");}var finalizationGroup=false;function detachFinalizer(handle){}function runDestructor($$){if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr);}else {$$.ptrType.registeredClass.rawDestructor($$.ptr);}}function releaseClassHandle($$){$$.count.value-=1;var toDelete=0===$$.count.value;if(toDelete){runDestructor($$);}}function attachFinalizer(handle){if("undefined"===typeof FinalizationGroup){attachFinalizer=function(handle){return handle};return handle}finalizationGroup=new FinalizationGroup(function(iter){for(var result=iter.next();!result.done;result=iter.next()){var $$=result.value;if(!$$.ptr){console.warn("object already deleted: "+$$.ptr);}else {releaseClassHandle($$);}}});attachFinalizer=function(handle){finalizationGroup.register(handle,handle.$$,handle.$$);return handle};detachFinalizer=function(handle){finalizationGroup.unregister(handle.$$);};return attachFinalizer(handle)}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this);}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else {var clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}));clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this);}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion");}detachFinalizer(this);releaseClassHandle(this.$$);if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined;}}function ClassHandle_isDeleted(){return !this.$$.ptr}var delayFunction=undefined;var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj["delete"]();}}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this);}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion");}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes);}this.$$.deleteScheduled=true;return this}function init_ClassHandle(){ClassHandle.prototype["isAliasOf"]=ClassHandle_isAliasOf;ClassHandle.prototype["clone"]=ClassHandle_clone;ClassHandle.prototype["delete"]=ClassHandle_delete;ClassHandle.prototype["isDeleted"]=ClassHandle_isDeleted;ClassHandle.prototype["deleteLater"]=ClassHandle_deleteLater;}function ClassHandle(){}var registeredPointers={};function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!");}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc;}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError("Cannot register public name '"+name+"' twice");}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!");}Module[name].overloadTable[numArguments]=value;}else {Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments;}}}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[];}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name);}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass;}return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name);}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name);}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name);}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr);}return ptr}else {return 0}}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name);}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name);}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError("Passing raw pointer to smart pointer is illegal");}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr;}else {throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name);}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr;}else {var clonedHandle=handle["clone"]();ptr=this.rawShare(ptr,__emval_register(function(){clonedHandle["delete"]();}));if(destructors!==null){destructors.push(this.rawDestructor,ptr);}}break;default:throwBindingError("Unsupporting sharing policy");}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name);}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name);}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);}if(handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name);}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function simpleReadValueFromPointer(pointer){return this["fromWireType"](HEAPU32[pointer>>2])}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr);}return ptr}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr);}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle["delete"]();}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)}function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k]);}}return rv}function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes);}}function init_embind(){Module["getInheritedInstanceCount"]=getInheritedInstanceCount;Module["getLiveInheritedInstances"]=getLiveInheritedInstances;Module["flushPendingDeletes"]=flushPendingDeletes;Module["setDelayFunction"]=setDelayFunction;}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===undefined){throwBindingError("ptr should not be undefined");}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass;}return ptr}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]}function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError("makeClassHandle requires ptr and ptrType");}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError("Both smartPtrType and smartPtr must be specified");}record.count={value:1};return attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance["clone"]()}else {var rv=registeredInstance["clone"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else {return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType;}else {toType=registeredPointerRecord.pointerType;}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else {return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype["argPackAdvance"]=8;RegisteredPointer.prototype["readValueFromPointer"]=simpleReadValueFromPointer;RegisteredPointer.prototype["deleteObject"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype["fromWireType"]=RegisteredPointer_fromWireType;}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this["toWireType"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null;}else {this["toWireType"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null;}}else {this["toWireType"]=genericPointerToWireType;}}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError("Replacing nonexistant public symbol");}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value;}else {Module[name]=value;Module[name].argCount=numArguments;}}function getDynCaller(sig,ptr){assert(sig.indexOf("j")>=0,"getDynCaller should only be called with i64 sigs");var argCache=[];return function(){argCache.length=arguments.length;for(var i=0;i<arguments.length;i++){argCache[i]=arguments[i];}return dynCall(sig,ptr,argCache)}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(){if(signature.indexOf("j")!=-1){return getDynCaller(signature,rawFunction)}return wasmTable.get(rawFunction)}var fp=makeDynCaller();if(typeof fp!=="function"){throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction);}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true;}types.forEach(visit);throw new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast);}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast);}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError("Cannot construct "+name+" due to unbound types",[baseClassRawType]);});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype;}else {basePrototype=ClassHandle.prototype;}var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError("Use 'new' to construct "+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+" has no accessible constructor")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError("Tried to invoke ctor of "+name+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!")}return body.apply(this,arguments)});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+"*",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return [referenceConverter,pointerConverter,constPointerConverter]});}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i]);}return array}function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr);}}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){assert(argCount>0);var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);var args=[rawConstructor];var destructors=[];whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName="constructor "+classType.name;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[];}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError("Cannot register multiple constructors with identical number of parameters ("+(argCount-1)+") for class '"+classType.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!")}classType.registeredClass.constructor_body[argCount-1]=function unboundTypeHandler(){throwUnboundTypeError("Cannot construct "+classType.name+" due to unbound types",rawArgTypes);};whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){classType.registeredClass.constructor_body[argCount-1]=function constructor_body(){if(arguments.length!==argCount-1){throwBindingError(humanName+" called with "+arguments.length+" arguments, expected "+(argCount-1));}destructors.length=0;args.length=argCount;for(var i=1;i<argCount;++i){args[i]=argTypes[i]["toWireType"](destructors,arguments[i-1]);}var ptr=invoker.apply(null,args);runDestructors(destructors);return argTypes[0]["fromWireType"](ptr)};return []});return []});}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function")}var dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!=="void";var argsList="";var argsListWired="";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?", ":"")+"arg"+i;argsListWired+=(i!==0?", ":"")+"arg"+i+"Wired";}var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n"+"if (arguments.length !== "+(argCount-2)+") {\n"+"throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n"+"}\n";if(needsDestructorStack){invokerFnBody+="var destructors = [];\n";}var dtorStack=needsDestructorStack?"destructors":"null";var args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n";}for(var i=0;i<argCount-2;++i){invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";args1.push("argType"+i);args2.push(argTypes[i+2]);}if(isClassMethodFunc){argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired;}invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";if(needsDestructorStack){invokerFnBody+="runDestructors(destructors);\n";}else {for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?"thisWired":"arg"+(i-2)+"Wired";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";args1.push(paramName+"_dtor");args2.push(argTypes[i].destructorFunction);}}}if(returns){invokerFnBody+="var ret = retType.fromWireType(rv);\n"+"return ret;\n";}invokerFnBody+="}\n";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=classType.name+"."+methodName;if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName);}function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes);}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler;}else {ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler;}whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction;}else {proto[methodName].overloadTable[argCount-2]=memberFunction;}return []});return []});}function validateThis(this_,classType,humanName){if(!(this_ instanceof Object)){throwBindingError(humanName+' with invalid "this": '+this_);}if(!(this_ instanceof classType.registeredClass.constructor)){throwBindingError(humanName+' incompatible with "this" of type '+this_.constructor.name);}if(!this_.$$.ptr){throwBindingError("cannot call emscripten binding method "+humanName+" on deleted object");}return upcastPointer(this_.$$.ptr,this_.$$.ptrType.registeredClass,classType.registeredClass)}function __embind_register_class_property(classType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){fieldName=readLatin1String(fieldName);getter=embind__requireFunction(getterSignature,getter);whenDependentTypesAreResolved([],[classType],function(classType){classType=classType[0];var humanName=classType.name+"."+fieldName;var desc={get:function(){throwUnboundTypeError("Cannot access "+humanName+" due to unbound types",[getterReturnType,setterArgumentType]);},enumerable:true,configurable:true};if(setter){desc.set=function(){throwUnboundTypeError("Cannot access "+humanName+" due to unbound types",[getterReturnType,setterArgumentType]);};}else {desc.set=function(v){throwBindingError(humanName+" is a read-only property");};}Object.defineProperty(classType.registeredClass.instancePrototype,fieldName,desc);whenDependentTypesAreResolved([],setter?[getterReturnType,setterArgumentType]:[getterReturnType],function(types){var getterReturnType=types[0];var desc={get:function(){var ptr=validateThis(this,classType,humanName+" getter");return getterReturnType["fromWireType"](getter(getterContext,ptr))},enumerable:true};if(setter){setter=embind__requireFunction(setterSignature,setter);var setterArgumentType=types[1];desc.set=function(v){var ptr=validateThis(this,classType,humanName+" setter");var destructors=[];setter(setterContext,ptr,setterArgumentType["toWireType"](destructors,v));runDestructors(destructors);};}Object.defineProperty(classType.registeredClass.instancePrototype,fieldName,desc);return []});return []});}function __embind_register_constant(name,type,value){name=readLatin1String(name);whenDependentTypesAreResolved([],[type],function(type){type=type[0];Module[name]=type["fromWireType"](value);return []});}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle);}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count;}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module["count_emval_handles"]=count_emval_handles;Module["get_first_emval"]=get_first_emval;}function __emval_register(value){switch(value){case undefined:{return 1}case null:{return 2}case true:{return 3}case false:{return 4}default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(handle){var rv=emval_handle_array[handle].value;__emval_decref(handle);return rv},"toWireType":function(destructors,value){return __emval_register(value)},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:null});}function _embind_repr(v){if(v===null){return "null"}var t=typeof v;if(t==="object"||t==="array"||t==="function"){return v.toString()}else {return ""+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this["fromWireType"](HEAPF32[pointer>>2])};case 3:return function(pointer){return this["fromWireType"](HEAPF64[pointer>>3])};default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(value){return value},"toWireType":function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}return value},"argPackAdvance":8,"readValueFromPointer":floatReadValueFromPointer(name,shift),destructorFunction:null});}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError("Cannot call "+name+" due to unbound types",argTypes);},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return []});}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295;}var shift=getShiftFromSize(size);var fromWireType=function(value){return value};if(minRange===0){var bitshift=32-8*size;fromWireType=function(value){return value<<bitshift>>>bitshift};}var isUnsignedType=name.indexOf("unsigned")!=-1;registerType(primitiveType,{name:name,"fromWireType":fromWireType,"toWireType":function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}if(value<minRange||value>maxRange){throw new TypeError('Passing a number "'+_embind_repr(value)+'" from JS side to C/C++ side to an argument of type "'+name+'", which is outside the valid range ['+minRange+", "+maxRange+"]!")}return isUnsignedType?value>>>0:value|0},"argPackAdvance":8,"readValueFromPointer":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null});}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":decodeMemoryView,"argPackAdvance":8,"readValueFromPointer":decodeMemoryView},{ignoreDuplicateRegistrations:true});}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name==="std::string";registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var str;if(stdStringIsUTF8){var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment;}else {str+=String.fromCharCode(0);str+=stringSegment;}decodeStartPtr=currentBytePtr+1;}}}else {var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i]);}str=a.join("");}_free(value);return str},"toWireType":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value);}var getLength;var valueIsOfTypeString=typeof value==="string";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError("Cannot pass non-string to std::string");}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=function(){return lengthBytesUTF8(value)};}else {getLength=function(){return value.length};}var length=getLength();var ptr=_malloc(4+length+1);HEAPU32[ptr>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1);}else {if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError("String has UTF-16 code units that do not fit in 8 bits");}HEAPU8[ptr+4+i]=charCode;}}else {for(var i=0;i<length;++i){HEAPU8[ptr+4+i]=value[i];}}}if(destructors!==null){destructors.push(_free,ptr);}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr);}});}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=function(){return HEAPU16};shift=1;}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=function(){return HEAPU32};shift=2;}registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment;}else {str+=String.fromCharCode(0);str+=stringSegment;}decodeStartPtr=currentBytePtr+charSize;}}_free(value);return str},"toWireType":function(destructors,value){if(!(typeof value==="string")){throwBindingError("Cannot pass non-string to C++ string type "+name);}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr);}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr);}});}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,"argPackAdvance":0,"fromWireType":function(){return undefined},"toWireType":function(destructors,o){return undefined}});}function requireHandle(handle){if(!handle){throwBindingError("Cannot use deleted val. handle = "+handle);}return emval_handle_array[handle].value}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+" has unknown type "+getTypeName(rawType));}return impl}function __emval_as(handle,returnType,destructorsRef){handle=requireHandle(handle);returnType=requireRegisteredType(returnType,"emval::as");var destructors=[];var rd=__emval_register(destructors);HEAP32[destructorsRef>>2]=rd;return returnType["toWireType"](destructors,handle)}function __emval_lookupTypes(argCount,argTypes){var a=new Array(argCount);for(var i=0;i<argCount;++i){a[i]=requireRegisteredType(HEAP32[(argTypes>>2)+i],"parameter "+i);}return a}function __emval_call(handle,argCount,argTypes,argv){handle=requireHandle(handle);var types=__emval_lookupTypes(argCount,argTypes);var args=new Array(argCount);for(var i=0;i<argCount;++i){var type=types[i];args[i]=type["readValueFromPointer"](argv);argv+=type["argPackAdvance"];}var rv=handle.apply(undefined,args);return __emval_register(rv)}var emval_symbols={};function getStringOrSymbol(address){var symbol=emval_symbols[address];if(symbol===undefined){return readLatin1String(address)}else {return symbol}}var emval_methodCallers=[];function __emval_call_void_method(caller,handle,methodName,args){caller=emval_methodCallers[caller];handle=requireHandle(handle);methodName=getStringOrSymbol(methodName);caller(handle,methodName,null,args);}function __emval_addMethodCaller(caller){var id=emval_methodCallers.length;emval_methodCallers.push(caller);return id}function __emval_get_method_caller(argCount,argTypes){var types=__emval_lookupTypes(argCount,argTypes);var retType=types[0];var signatureName=retType.name+"_$"+types.slice(1).map(function(t){return t.name}).join("_")+"$";var params=["retType"];var args=[retType];var argsList="";for(var i=0;i<argCount-1;++i){argsList+=(i!==0?", ":"")+"arg"+i;params.push("argType"+i);args.push(types[1+i]);}var functionName=makeLegalFunctionName("methodCaller_"+signatureName);var functionBody="return function "+functionName+"(handle, name, destructors, args) {\n";var offset=0;for(var i=0;i<argCount-1;++i){functionBody+="    var arg"+i+" = argType"+i+".readValueFromPointer(args"+(offset?"+"+offset:"")+");\n";offset+=types[i+1]["argPackAdvance"];}functionBody+="    var rv = handle[name]("+argsList+");\n";for(var i=0;i<argCount-1;++i){if(types[i+1]["deleteObject"]){functionBody+="    argType"+i+".deleteObject(arg"+i+");\n";}}if(!retType.isVoid){functionBody+="    return retType.toWireType(destructors, rv);\n";}functionBody+="};\n";params.push(functionBody);var invokerFunction=new_(Function,params).apply(null,args);return __emval_addMethodCaller(invokerFunction)}function __emval_get_property(handle,key){handle=requireHandle(handle);key=requireHandle(key);return __emval_register(handle[key])}function __emval_incref(handle){if(handle>4){emval_handle_array[handle].refcount+=1;}}function __emval_new_array(){return __emval_register([])}function __emval_new_cstring(v){return __emval_register(getStringOrSymbol(v))}function __emval_new_object(){return __emval_register({})}function __emval_run_destructors(handle){var destructors=emval_handle_array[handle].value;runDestructors(destructors);__emval_decref(handle);}function __emval_set_property(handle,key,value){handle=requireHandle(handle);key=requireHandle(key);value=requireHandle(value);handle[key]=value;}function __emval_strictly_equals(first,second){first=requireHandle(first);second=requireHandle(second);return first===second}function __emval_take_value(type,argv){type=requireRegisteredType(type,"_emval_take_value");var v=type["readValueFromPointer"](argv);return __emval_register(v)}function __emval_typeof(handle){handle=requireHandle(handle);return __emval_register(typeof handle)}function _abort(){abort();}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num);}function abortOnCannotGrowMemory(requestedSize){abort("OOM");}function _emscripten_resize_heap(requestedSize){abortOnCannotGrowMemory();}function _fd_close(fd){return 0}function _fd_read(fd,iov,iovcnt,pnum){var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){}function _fd_write(fd,iov,iovcnt,pnum){var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(fd,HEAPU8[ptr+j]);}num+=len;}HEAP32[pnum>>2]=num;return 0}function _setTempRet0($i){}embind_init_charCodes();BindingError=Module["BindingError"]=extendError(Error,"BindingError");InternalError=Module["InternalError"]=extendError(Error,"InternalError");init_ClassHandle();init_RegisteredPointer();init_embind();UnboundTypeError=Module["UnboundTypeError"]=extendError(Error,"UnboundTypeError");init_emval();function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255;}ret.push(String.fromCharCode(chr));}return ret.join("")}var decodeBase64=typeof atob==="function"?atob:function(input){var keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2);}if(enc4!==64){output=output+String.fromCharCode(chr3);}}while(i<input.length);return output};function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE==="boolean"&&ENVIRONMENT_IS_NODE){var buf;try{buf=Buffer.from(s,"base64");}catch(_){buf=new Buffer(s,"base64");}return new Uint8Array(buf["buffer"],buf["byteOffset"],buf["byteLength"])}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i);}return bytes}catch(_){throw new Error("Converting base64 string to bytes failed.")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}__ATINIT__.push({func:function(){___wasm_call_ctors();}});var asmLibraryArg={"Q":___cxa_allocate_exception,"P":___cxa_throw,"b":wasmTable,"u":___sys_fcntl64,"G":___sys_ioctl,"H":___sys_open,"J":__embind_register_bool,"h":__embind_register_class,"n":__embind_register_class_constructor,"e":__embind_register_class_function,"c":__embind_register_class_property,"x":__embind_register_constant,"I":__embind_register_emval,"v":__embind_register_float,"d":__embind_register_function,"j":__embind_register_integer,"i":__embind_register_memory_view,"w":__embind_register_std_string,"q":__embind_register_std_wstring,"K":__embind_register_void,"g":__emval_as,"N":__emval_call,"l":__emval_call_void_method,"p":__emval_decref,"k":__emval_get_method_caller,"o":__emval_get_property,"r":__emval_incref,"L":__emval_new_array,"z":__emval_new_cstring,"R":__emval_new_object,"O":__emval_run_destructors,"m":__emval_set_property,"y":__emval_strictly_equals,"f":__emval_take_value,"M":__emval_typeof,"E":_abort,"C":_emscripten_memcpy_big,"D":_emscripten_resize_heap,"s":_fd_close,"F":_fd_read,"A":_fd_seek,"t":_fd_write,"a":wasmMemory,"B":_setTempRet0};var asm=createWasm();var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return (___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["S"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return (_malloc=Module["_malloc"]=Module["asm"]["T"]).apply(null,arguments)};var _free=Module["_free"]=function(){return (_free=Module["_free"]=Module["asm"]["U"]).apply(null,arguments)};var ___getTypeName=Module["___getTypeName"]=function(){return (___getTypeName=Module["___getTypeName"]=Module["asm"]["V"]).apply(null,arguments)};var ___embind_register_native_and_builtin_types=Module["___embind_register_native_and_builtin_types"]=function(){return (___embind_register_native_and_builtin_types=Module["___embind_register_native_and_builtin_types"]=Module["asm"]["W"]).apply(null,arguments)};var dynCall_jiji=Module["dynCall_jiji"]=function(){return (dynCall_jiji=Module["dynCall_jiji"]=Module["asm"]["X"]).apply(null,arguments)};var calledRun;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status;}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller;};function run(args){if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun();}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("");},1);doRun();},1);}else {doRun();}}Module["run"]=run;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()();}}noExitRuntime=true;run();


	  return Module.ready
	}
	);
	})();
	module.exports = Module;
	});
	var bindImgui_1 = bindImgui.bind;

	let bind;
	function IM_ASSERT(_EXPR) { if (!_EXPR) {
	    throw new Error();
	} }
	function IM_ARRAYSIZE(_ARR) {
	    if (_ARR instanceof ImStringBuffer) {
	        return _ARR.size;
	    }
	    else {
	        return _ARR.length;
	    }
	}
	class ImStringBuffer {
	    constructor(size, buffer = "") {
	        this.size = size;
	        this.buffer = buffer;
	    }
	}
	var ImGuiWindowFlags;
	(function (ImGuiWindowFlags) {
	    ImGuiWindowFlags[ImGuiWindowFlags["None"] = 0] = "None";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoTitleBar"] = 1] = "NoTitleBar";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoResize"] = 2] = "NoResize";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoMove"] = 4] = "NoMove";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoScrollbar"] = 8] = "NoScrollbar";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoScrollWithMouse"] = 16] = "NoScrollWithMouse";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoCollapse"] = 32] = "NoCollapse";
	    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysAutoResize"] = 64] = "AlwaysAutoResize";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoBackground"] = 128] = "NoBackground";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoSavedSettings"] = 256] = "NoSavedSettings";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoMouseInputs"] = 512] = "NoMouseInputs";
	    ImGuiWindowFlags[ImGuiWindowFlags["MenuBar"] = 1024] = "MenuBar";
	    ImGuiWindowFlags[ImGuiWindowFlags["HorizontalScrollbar"] = 2048] = "HorizontalScrollbar";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoFocusOnAppearing"] = 4096] = "NoFocusOnAppearing";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoBringToFrontOnFocus"] = 8192] = "NoBringToFrontOnFocus";
	    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysVerticalScrollbar"] = 16384] = "AlwaysVerticalScrollbar";
	    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysHorizontalScrollbar"] = 32768] = "AlwaysHorizontalScrollbar";
	    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysUseWindowPadding"] = 65536] = "AlwaysUseWindowPadding";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoNavInputs"] = 262144] = "NoNavInputs";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoNavFocus"] = 524288] = "NoNavFocus";
	    ImGuiWindowFlags[ImGuiWindowFlags["UnsavedDocument"] = 1048576] = "UnsavedDocument";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoNav"] = 786432] = "NoNav";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoDecoration"] = 43] = "NoDecoration";
	    ImGuiWindowFlags[ImGuiWindowFlags["NoInputs"] = 786944] = "NoInputs";
	    // [Internal]
	    ImGuiWindowFlags[ImGuiWindowFlags["NavFlattened"] = 8388608] = "NavFlattened";
	    ImGuiWindowFlags[ImGuiWindowFlags["ChildWindow"] = 16777216] = "ChildWindow";
	    ImGuiWindowFlags[ImGuiWindowFlags["Tooltip"] = 33554432] = "Tooltip";
	    ImGuiWindowFlags[ImGuiWindowFlags["Popup"] = 67108864] = "Popup";
	    ImGuiWindowFlags[ImGuiWindowFlags["Modal"] = 134217728] = "Modal";
	    ImGuiWindowFlags[ImGuiWindowFlags["ChildMenu"] = 268435456] = "ChildMenu";
	})(ImGuiWindowFlags || (ImGuiWindowFlags = {}));
	var ImGuiInputTextFlags;
	(function (ImGuiInputTextFlags) {
	    ImGuiInputTextFlags[ImGuiInputTextFlags["None"] = 0] = "None";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsDecimal"] = 1] = "CharsDecimal";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsHexadecimal"] = 2] = "CharsHexadecimal";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsUppercase"] = 4] = "CharsUppercase";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsNoBlank"] = 8] = "CharsNoBlank";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["AutoSelectAll"] = 16] = "AutoSelectAll";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["EnterReturnsTrue"] = 32] = "EnterReturnsTrue";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackCompletion"] = 64] = "CallbackCompletion";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackHistory"] = 128] = "CallbackHistory";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackAlways"] = 256] = "CallbackAlways";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackCharFilter"] = 512] = "CallbackCharFilter";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["AllowTabInput"] = 1024] = "AllowTabInput";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["CtrlEnterForNewLine"] = 2048] = "CtrlEnterForNewLine";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["NoHorizontalScroll"] = 4096] = "NoHorizontalScroll";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["AlwaysInsertMode"] = 8192] = "AlwaysInsertMode";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["ReadOnly"] = 16384] = "ReadOnly";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["Password"] = 32768] = "Password";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["NoUndoRedo"] = 65536] = "NoUndoRedo";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsScientific"] = 131072] = "CharsScientific";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackResize"] = 262144] = "CallbackResize";
	    // [Internal]
	    ImGuiInputTextFlags[ImGuiInputTextFlags["Multiline"] = 1048576] = "Multiline";
	    ImGuiInputTextFlags[ImGuiInputTextFlags["NoMarkEdited"] = 2097152] = "NoMarkEdited";
	})(ImGuiInputTextFlags || (ImGuiInputTextFlags = {}));
	var ImGuiTreeNodeFlags;
	(function (ImGuiTreeNodeFlags) {
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["None"] = 0] = "None";
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Selected"] = 1] = "Selected";
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Framed"] = 2] = "Framed";
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["AllowItemOverlap"] = 4] = "AllowItemOverlap";
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["NoTreePushOnOpen"] = 8] = "NoTreePushOnOpen";
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["NoAutoOpenOnLog"] = 16] = "NoAutoOpenOnLog";
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["DefaultOpen"] = 32] = "DefaultOpen";
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["OpenOnDoubleClick"] = 64] = "OpenOnDoubleClick";
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["OpenOnArrow"] = 128] = "OpenOnArrow";
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Leaf"] = 256] = "Leaf";
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Bullet"] = 512] = "Bullet";
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["FramePadding"] = 1024] = "FramePadding";
	    //SpanAllAvailWidth  = 1 << 11,  // FIXME: TODO: Extend hit box horizontally even if not framed
	    //NoScrollOnOpen     = 1 << 12,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["NavLeftJumpsBackHere"] = 8192] = "NavLeftJumpsBackHere";
	    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["CollapsingHeader"] = 26] = "CollapsingHeader";
	})(ImGuiTreeNodeFlags || (ImGuiTreeNodeFlags = {}));
	var ImGuiSelectableFlags;
	(function (ImGuiSelectableFlags) {
	    ImGuiSelectableFlags[ImGuiSelectableFlags["None"] = 0] = "None";
	    ImGuiSelectableFlags[ImGuiSelectableFlags["DontClosePopups"] = 1] = "DontClosePopups";
	    ImGuiSelectableFlags[ImGuiSelectableFlags["SpanAllColumns"] = 2] = "SpanAllColumns";
	    ImGuiSelectableFlags[ImGuiSelectableFlags["AllowDoubleClick"] = 4] = "AllowDoubleClick";
	    ImGuiSelectableFlags[ImGuiSelectableFlags["Disabled"] = 8] = "Disabled"; // Cannot be selected, display greyed out text
	})(ImGuiSelectableFlags || (ImGuiSelectableFlags = {}));
	var ImGuiComboFlags;
	(function (ImGuiComboFlags) {
	    ImGuiComboFlags[ImGuiComboFlags["None"] = 0] = "None";
	    ImGuiComboFlags[ImGuiComboFlags["PopupAlignLeft"] = 1] = "PopupAlignLeft";
	    ImGuiComboFlags[ImGuiComboFlags["HeightSmall"] = 2] = "HeightSmall";
	    ImGuiComboFlags[ImGuiComboFlags["HeightRegular"] = 4] = "HeightRegular";
	    ImGuiComboFlags[ImGuiComboFlags["HeightLarge"] = 8] = "HeightLarge";
	    ImGuiComboFlags[ImGuiComboFlags["HeightLargest"] = 16] = "HeightLargest";
	    ImGuiComboFlags[ImGuiComboFlags["NoArrowButton"] = 32] = "NoArrowButton";
	    ImGuiComboFlags[ImGuiComboFlags["NoPreview"] = 64] = "NoPreview";
	    ImGuiComboFlags[ImGuiComboFlags["HeightMask_"] = 30] = "HeightMask_";
	})(ImGuiComboFlags || (ImGuiComboFlags = {}));
	var ImGuiTabBarFlags;
	(function (ImGuiTabBarFlags) {
	    ImGuiTabBarFlags[ImGuiTabBarFlags["None"] = 0] = "None";
	    ImGuiTabBarFlags[ImGuiTabBarFlags["Reorderable"] = 1] = "Reorderable";
	    ImGuiTabBarFlags[ImGuiTabBarFlags["AutoSelectNewTabs"] = 2] = "AutoSelectNewTabs";
	    ImGuiTabBarFlags[ImGuiTabBarFlags["TabListPopupButton"] = 4] = "TabListPopupButton";
	    ImGuiTabBarFlags[ImGuiTabBarFlags["NoCloseWithMiddleMouseButton"] = 8] = "NoCloseWithMiddleMouseButton";
	    ImGuiTabBarFlags[ImGuiTabBarFlags["NoTabListScrollingButtons"] = 16] = "NoTabListScrollingButtons";
	    ImGuiTabBarFlags[ImGuiTabBarFlags["NoTooltip"] = 32] = "NoTooltip";
	    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyResizeDown"] = 64] = "FittingPolicyResizeDown";
	    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyScroll"] = 128] = "FittingPolicyScroll";
	    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyMask_"] = 192] = "FittingPolicyMask_";
	    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyDefault_"] = 64] = "FittingPolicyDefault_";
	})(ImGuiTabBarFlags || (ImGuiTabBarFlags = {}));
	var ImGuiTabItemFlags;
	(function (ImGuiTabItemFlags) {
	    ImGuiTabItemFlags[ImGuiTabItemFlags["ImGuiTabItemFlags_None"] = 0] = "ImGuiTabItemFlags_None";
	    ImGuiTabItemFlags[ImGuiTabItemFlags["ImGuiTabItemFlags_UnsavedDocument"] = 1] = "ImGuiTabItemFlags_UnsavedDocument";
	    ImGuiTabItemFlags[ImGuiTabItemFlags["ImGuiTabItemFlags_SetSelected"] = 2] = "ImGuiTabItemFlags_SetSelected";
	    ImGuiTabItemFlags[ImGuiTabItemFlags["ImGuiTabItemFlags_NoCloseWithMiddleMouseButton"] = 4] = "ImGuiTabItemFlags_NoCloseWithMiddleMouseButton";
	    ImGuiTabItemFlags[ImGuiTabItemFlags["ImGuiTabItemFlags_NoPushId"] = 8] = "ImGuiTabItemFlags_NoPushId"; // Don't call PushID(tab->ID)/PopID() on BeginTabItem()/EndTabItem()
	})(ImGuiTabItemFlags || (ImGuiTabItemFlags = {}));
	var ImGuiFocusedFlags;
	(function (ImGuiFocusedFlags) {
	    ImGuiFocusedFlags[ImGuiFocusedFlags["None"] = 0] = "None";
	    ImGuiFocusedFlags[ImGuiFocusedFlags["ChildWindows"] = 1] = "ChildWindows";
	    ImGuiFocusedFlags[ImGuiFocusedFlags["RootWindow"] = 2] = "RootWindow";
	    ImGuiFocusedFlags[ImGuiFocusedFlags["AnyWindow"] = 4] = "AnyWindow";
	    ImGuiFocusedFlags[ImGuiFocusedFlags["RootAndChildWindows"] = 3] = "RootAndChildWindows";
	})(ImGuiFocusedFlags || (ImGuiFocusedFlags = {}));
	var ImGuiHoveredFlags;
	(function (ImGuiHoveredFlags) {
	    ImGuiHoveredFlags[ImGuiHoveredFlags["None"] = 0] = "None";
	    ImGuiHoveredFlags[ImGuiHoveredFlags["ChildWindows"] = 1] = "ChildWindows";
	    ImGuiHoveredFlags[ImGuiHoveredFlags["RootWindow"] = 2] = "RootWindow";
	    ImGuiHoveredFlags[ImGuiHoveredFlags["AnyWindow"] = 4] = "AnyWindow";
	    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenBlockedByPopup"] = 8] = "AllowWhenBlockedByPopup";
	    //AllowWhenBlockedByModal     = 1 << 4,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.
	    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenBlockedByActiveItem"] = 32] = "AllowWhenBlockedByActiveItem";
	    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenOverlapped"] = 64] = "AllowWhenOverlapped";
	    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenDisabled"] = 128] = "AllowWhenDisabled";
	    ImGuiHoveredFlags[ImGuiHoveredFlags["RectOnly"] = 104] = "RectOnly";
	    ImGuiHoveredFlags[ImGuiHoveredFlags["RootAndChildWindows"] = 3] = "RootAndChildWindows";
	})(ImGuiHoveredFlags || (ImGuiHoveredFlags = {}));
	var ImGuiDragDropFlags;
	(function (ImGuiDragDropFlags) {
	    // BeginDragDropSource() flags
	    ImGuiDragDropFlags[ImGuiDragDropFlags["None"] = 0] = "None";
	    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceNoPreviewTooltip"] = 1] = "SourceNoPreviewTooltip";
	    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceNoDisableHover"] = 2] = "SourceNoDisableHover";
	    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceNoHoldToOpenOthers"] = 4] = "SourceNoHoldToOpenOthers";
	    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceAllowNullID"] = 8] = "SourceAllowNullID";
	    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceExtern"] = 16] = "SourceExtern";
	    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceAutoExpirePayload"] = 32] = "SourceAutoExpirePayload";
	    // AcceptDragDropPayload() flags
	    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptBeforeDelivery"] = 1024] = "AcceptBeforeDelivery";
	    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptNoDrawDefaultRect"] = 2048] = "AcceptNoDrawDefaultRect";
	    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptNoPreviewTooltip"] = 4096] = "AcceptNoPreviewTooltip";
	    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptPeekOnly"] = 3072] = "AcceptPeekOnly";
	})(ImGuiDragDropFlags || (ImGuiDragDropFlags = {}));
	var ImGuiDataType;
	(function (ImGuiDataType) {
	    ImGuiDataType[ImGuiDataType["S8"] = 0] = "S8";
	    ImGuiDataType[ImGuiDataType["U8"] = 1] = "U8";
	    ImGuiDataType[ImGuiDataType["S16"] = 2] = "S16";
	    ImGuiDataType[ImGuiDataType["U16"] = 3] = "U16";
	    ImGuiDataType[ImGuiDataType["S32"] = 4] = "S32";
	    ImGuiDataType[ImGuiDataType["U32"] = 5] = "U32";
	    ImGuiDataType[ImGuiDataType["S64"] = 6] = "S64";
	    ImGuiDataType[ImGuiDataType["U64"] = 7] = "U64";
	    ImGuiDataType[ImGuiDataType["Float"] = 8] = "Float";
	    ImGuiDataType[ImGuiDataType["Double"] = 9] = "Double";
	    ImGuiDataType[ImGuiDataType["COUNT"] = 10] = "COUNT";
	})(ImGuiDataType || (ImGuiDataType = {}));
	var ImGuiDir;
	(function (ImGuiDir) {
	    ImGuiDir[ImGuiDir["None"] = -1] = "None";
	    ImGuiDir[ImGuiDir["Left"] = 0] = "Left";
	    ImGuiDir[ImGuiDir["Right"] = 1] = "Right";
	    ImGuiDir[ImGuiDir["Up"] = 2] = "Up";
	    ImGuiDir[ImGuiDir["Down"] = 3] = "Down";
	    ImGuiDir[ImGuiDir["COUNT"] = 4] = "COUNT";
	})(ImGuiDir || (ImGuiDir = {}));
	var ImGuiKey;
	(function (ImGuiKey) {
	    ImGuiKey[ImGuiKey["Tab"] = 0] = "Tab";
	    ImGuiKey[ImGuiKey["LeftArrow"] = 1] = "LeftArrow";
	    ImGuiKey[ImGuiKey["RightArrow"] = 2] = "RightArrow";
	    ImGuiKey[ImGuiKey["UpArrow"] = 3] = "UpArrow";
	    ImGuiKey[ImGuiKey["DownArrow"] = 4] = "DownArrow";
	    ImGuiKey[ImGuiKey["PageUp"] = 5] = "PageUp";
	    ImGuiKey[ImGuiKey["PageDown"] = 6] = "PageDown";
	    ImGuiKey[ImGuiKey["Home"] = 7] = "Home";
	    ImGuiKey[ImGuiKey["End"] = 8] = "End";
	    ImGuiKey[ImGuiKey["Insert"] = 9] = "Insert";
	    ImGuiKey[ImGuiKey["Delete"] = 10] = "Delete";
	    ImGuiKey[ImGuiKey["Backspace"] = 11] = "Backspace";
	    ImGuiKey[ImGuiKey["Space"] = 12] = "Space";
	    ImGuiKey[ImGuiKey["Enter"] = 13] = "Enter";
	    ImGuiKey[ImGuiKey["Escape"] = 14] = "Escape";
	    ImGuiKey[ImGuiKey["A"] = 15] = "A";
	    ImGuiKey[ImGuiKey["C"] = 16] = "C";
	    ImGuiKey[ImGuiKey["V"] = 17] = "V";
	    ImGuiKey[ImGuiKey["X"] = 18] = "X";
	    ImGuiKey[ImGuiKey["Y"] = 19] = "Y";
	    ImGuiKey[ImGuiKey["Z"] = 20] = "Z";
	    ImGuiKey[ImGuiKey["COUNT"] = 21] = "COUNT";
	})(ImGuiKey || (ImGuiKey = {}));
	var ImGuiNavInput;
	(function (ImGuiNavInput) {
	    // Gamepad Mapping
	    ImGuiNavInput[ImGuiNavInput["Activate"] = 0] = "Activate";
	    ImGuiNavInput[ImGuiNavInput["Cancel"] = 1] = "Cancel";
	    ImGuiNavInput[ImGuiNavInput["Input"] = 2] = "Input";
	    ImGuiNavInput[ImGuiNavInput["Menu"] = 3] = "Menu";
	    ImGuiNavInput[ImGuiNavInput["DpadLeft"] = 4] = "DpadLeft";
	    ImGuiNavInput[ImGuiNavInput["DpadRight"] = 5] = "DpadRight";
	    ImGuiNavInput[ImGuiNavInput["DpadUp"] = 6] = "DpadUp";
	    ImGuiNavInput[ImGuiNavInput["DpadDown"] = 7] = "DpadDown";
	    ImGuiNavInput[ImGuiNavInput["LStickLeft"] = 8] = "LStickLeft";
	    ImGuiNavInput[ImGuiNavInput["LStickRight"] = 9] = "LStickRight";
	    ImGuiNavInput[ImGuiNavInput["LStickUp"] = 10] = "LStickUp";
	    ImGuiNavInput[ImGuiNavInput["LStickDown"] = 11] = "LStickDown";
	    ImGuiNavInput[ImGuiNavInput["FocusPrev"] = 12] = "FocusPrev";
	    ImGuiNavInput[ImGuiNavInput["FocusNext"] = 13] = "FocusNext";
	    ImGuiNavInput[ImGuiNavInput["TweakSlow"] = 14] = "TweakSlow";
	    ImGuiNavInput[ImGuiNavInput["TweakFast"] = 15] = "TweakFast";
	    // [Internal] Don't use directly! This is used internally to differentiate keyboard from gamepad inputs for behaviors that require to differentiate them.
	    // Keyboard behavior that have no corresponding gamepad mapping (e.g. CTRL+TAB) may be directly reading from io.KeyDown[] instead of io.NavInputs[].
	    ImGuiNavInput[ImGuiNavInput["KeyMenu_"] = 16] = "KeyMenu_";
	    ImGuiNavInput[ImGuiNavInput["KeyTab_"] = 17] = "KeyTab_";
	    ImGuiNavInput[ImGuiNavInput["KeyLeft_"] = 18] = "KeyLeft_";
	    ImGuiNavInput[ImGuiNavInput["KeyRight_"] = 19] = "KeyRight_";
	    ImGuiNavInput[ImGuiNavInput["KeyUp_"] = 20] = "KeyUp_";
	    ImGuiNavInput[ImGuiNavInput["KeyDown_"] = 21] = "KeyDown_";
	    ImGuiNavInput[ImGuiNavInput["COUNT"] = 22] = "COUNT";
	    ImGuiNavInput[ImGuiNavInput["InternalStart_"] = 16] = "InternalStart_";
	})(ImGuiNavInput || (ImGuiNavInput = {}));
	var ImGuiConfigFlags;
	(function (ImGuiConfigFlags) {
	    ImGuiConfigFlags[ImGuiConfigFlags["None"] = 0] = "None";
	    ImGuiConfigFlags[ImGuiConfigFlags["NavEnableKeyboard"] = 1] = "NavEnableKeyboard";
	    ImGuiConfigFlags[ImGuiConfigFlags["NavEnableGamepad"] = 2] = "NavEnableGamepad";
	    ImGuiConfigFlags[ImGuiConfigFlags["NavEnableSetMousePos"] = 4] = "NavEnableSetMousePos";
	    ImGuiConfigFlags[ImGuiConfigFlags["NavNoCaptureKeyboard"] = 8] = "NavNoCaptureKeyboard";
	    ImGuiConfigFlags[ImGuiConfigFlags["NoMouse"] = 16] = "NoMouse";
	    ImGuiConfigFlags[ImGuiConfigFlags["NoMouseCursorChange"] = 32] = "NoMouseCursorChange";
	    ImGuiConfigFlags[ImGuiConfigFlags["IsSRGB"] = 1048576] = "IsSRGB";
	    ImGuiConfigFlags[ImGuiConfigFlags["IsTouchScreen"] = 2097152] = "IsTouchScreen"; // Application is using a touch screen instead of a mouse.
	})(ImGuiConfigFlags || (ImGuiConfigFlags = {}));
	var ImGuiCol;
	(function (ImGuiCol) {
	    ImGuiCol[ImGuiCol["Text"] = 0] = "Text";
	    ImGuiCol[ImGuiCol["TextDisabled"] = 1] = "TextDisabled";
	    ImGuiCol[ImGuiCol["WindowBg"] = 2] = "WindowBg";
	    ImGuiCol[ImGuiCol["ChildBg"] = 3] = "ChildBg";
	    ImGuiCol[ImGuiCol["PopupBg"] = 4] = "PopupBg";
	    ImGuiCol[ImGuiCol["Border"] = 5] = "Border";
	    ImGuiCol[ImGuiCol["BorderShadow"] = 6] = "BorderShadow";
	    ImGuiCol[ImGuiCol["FrameBg"] = 7] = "FrameBg";
	    ImGuiCol[ImGuiCol["FrameBgHovered"] = 8] = "FrameBgHovered";
	    ImGuiCol[ImGuiCol["FrameBgActive"] = 9] = "FrameBgActive";
	    ImGuiCol[ImGuiCol["TitleBg"] = 10] = "TitleBg";
	    ImGuiCol[ImGuiCol["TitleBgActive"] = 11] = "TitleBgActive";
	    ImGuiCol[ImGuiCol["TitleBgCollapsed"] = 12] = "TitleBgCollapsed";
	    ImGuiCol[ImGuiCol["MenuBarBg"] = 13] = "MenuBarBg";
	    ImGuiCol[ImGuiCol["ScrollbarBg"] = 14] = "ScrollbarBg";
	    ImGuiCol[ImGuiCol["ScrollbarGrab"] = 15] = "ScrollbarGrab";
	    ImGuiCol[ImGuiCol["ScrollbarGrabHovered"] = 16] = "ScrollbarGrabHovered";
	    ImGuiCol[ImGuiCol["ScrollbarGrabActive"] = 17] = "ScrollbarGrabActive";
	    ImGuiCol[ImGuiCol["CheckMark"] = 18] = "CheckMark";
	    ImGuiCol[ImGuiCol["SliderGrab"] = 19] = "SliderGrab";
	    ImGuiCol[ImGuiCol["SliderGrabActive"] = 20] = "SliderGrabActive";
	    ImGuiCol[ImGuiCol["Button"] = 21] = "Button";
	    ImGuiCol[ImGuiCol["ButtonHovered"] = 22] = "ButtonHovered";
	    ImGuiCol[ImGuiCol["ButtonActive"] = 23] = "ButtonActive";
	    ImGuiCol[ImGuiCol["Header"] = 24] = "Header";
	    ImGuiCol[ImGuiCol["HeaderHovered"] = 25] = "HeaderHovered";
	    ImGuiCol[ImGuiCol["HeaderActive"] = 26] = "HeaderActive";
	    ImGuiCol[ImGuiCol["Separator"] = 27] = "Separator";
	    ImGuiCol[ImGuiCol["SeparatorHovered"] = 28] = "SeparatorHovered";
	    ImGuiCol[ImGuiCol["SeparatorActive"] = 29] = "SeparatorActive";
	    ImGuiCol[ImGuiCol["ResizeGrip"] = 30] = "ResizeGrip";
	    ImGuiCol[ImGuiCol["ResizeGripHovered"] = 31] = "ResizeGripHovered";
	    ImGuiCol[ImGuiCol["ResizeGripActive"] = 32] = "ResizeGripActive";
	    ImGuiCol[ImGuiCol["Tab"] = 33] = "Tab";
	    ImGuiCol[ImGuiCol["TabHovered"] = 34] = "TabHovered";
	    ImGuiCol[ImGuiCol["TabActive"] = 35] = "TabActive";
	    ImGuiCol[ImGuiCol["TabUnfocused"] = 36] = "TabUnfocused";
	    ImGuiCol[ImGuiCol["TabUnfocusedActive"] = 37] = "TabUnfocusedActive";
	    ImGuiCol[ImGuiCol["PlotLines"] = 38] = "PlotLines";
	    ImGuiCol[ImGuiCol["PlotLinesHovered"] = 39] = "PlotLinesHovered";
	    ImGuiCol[ImGuiCol["PlotHistogram"] = 40] = "PlotHistogram";
	    ImGuiCol[ImGuiCol["PlotHistogramHovered"] = 41] = "PlotHistogramHovered";
	    ImGuiCol[ImGuiCol["TextSelectedBg"] = 42] = "TextSelectedBg";
	    ImGuiCol[ImGuiCol["DragDropTarget"] = 43] = "DragDropTarget";
	    ImGuiCol[ImGuiCol["NavHighlight"] = 44] = "NavHighlight";
	    ImGuiCol[ImGuiCol["NavWindowingHighlight"] = 45] = "NavWindowingHighlight";
	    ImGuiCol[ImGuiCol["NavWindowingDimBg"] = 46] = "NavWindowingDimBg";
	    ImGuiCol[ImGuiCol["ModalWindowDimBg"] = 47] = "ModalWindowDimBg";
	    ImGuiCol[ImGuiCol["COUNT"] = 48] = "COUNT";
	})(ImGuiCol || (ImGuiCol = {}));
	var ImGuiStyleVar;
	(function (ImGuiStyleVar) {
	    // Enum name ......................// Member in ImGuiStyle structure (see ImGuiStyle for descriptions)
	    ImGuiStyleVar[ImGuiStyleVar["Alpha"] = 0] = "Alpha";
	    ImGuiStyleVar[ImGuiStyleVar["WindowPadding"] = 1] = "WindowPadding";
	    ImGuiStyleVar[ImGuiStyleVar["WindowRounding"] = 2] = "WindowRounding";
	    ImGuiStyleVar[ImGuiStyleVar["WindowBorderSize"] = 3] = "WindowBorderSize";
	    ImGuiStyleVar[ImGuiStyleVar["WindowMinSize"] = 4] = "WindowMinSize";
	    ImGuiStyleVar[ImGuiStyleVar["WindowTitleAlign"] = 5] = "WindowTitleAlign";
	    // WindowMenuButtonPosition, // ImGuiDir WindowMenuButtonPosition
	    ImGuiStyleVar[ImGuiStyleVar["ChildRounding"] = 6] = "ChildRounding";
	    ImGuiStyleVar[ImGuiStyleVar["ChildBorderSize"] = 7] = "ChildBorderSize";
	    ImGuiStyleVar[ImGuiStyleVar["PopupRounding"] = 8] = "PopupRounding";
	    ImGuiStyleVar[ImGuiStyleVar["PopupBorderSize"] = 9] = "PopupBorderSize";
	    ImGuiStyleVar[ImGuiStyleVar["FramePadding"] = 10] = "FramePadding";
	    ImGuiStyleVar[ImGuiStyleVar["FrameRounding"] = 11] = "FrameRounding";
	    ImGuiStyleVar[ImGuiStyleVar["FrameBorderSize"] = 12] = "FrameBorderSize";
	    ImGuiStyleVar[ImGuiStyleVar["ItemSpacing"] = 13] = "ItemSpacing";
	    ImGuiStyleVar[ImGuiStyleVar["ItemInnerSpacing"] = 14] = "ItemInnerSpacing";
	    ImGuiStyleVar[ImGuiStyleVar["IndentSpacing"] = 15] = "IndentSpacing";
	    ImGuiStyleVar[ImGuiStyleVar["ScrollbarSize"] = 16] = "ScrollbarSize";
	    ImGuiStyleVar[ImGuiStyleVar["ScrollbarRounding"] = 17] = "ScrollbarRounding";
	    ImGuiStyleVar[ImGuiStyleVar["GrabMinSize"] = 18] = "GrabMinSize";
	    ImGuiStyleVar[ImGuiStyleVar["GrabRounding"] = 19] = "GrabRounding";
	    ImGuiStyleVar[ImGuiStyleVar["TabRounding"] = 20] = "TabRounding";
	    ImGuiStyleVar[ImGuiStyleVar["ButtonTextAlign"] = 21] = "ButtonTextAlign";
	    ImGuiStyleVar[ImGuiStyleVar["SelectableTextAlign"] = 22] = "SelectableTextAlign";
	    ImGuiStyleVar[ImGuiStyleVar["Count_"] = 23] = "Count_";
	    ImGuiStyleVar[ImGuiStyleVar["COUNT"] = 23] = "COUNT";
	})(ImGuiStyleVar || (ImGuiStyleVar = {}));
	var ImGuiBackendFlags;
	(function (ImGuiBackendFlags) {
	    ImGuiBackendFlags[ImGuiBackendFlags["None"] = 0] = "None";
	    ImGuiBackendFlags[ImGuiBackendFlags["HasGamepad"] = 1] = "HasGamepad";
	    ImGuiBackendFlags[ImGuiBackendFlags["HasMouseCursors"] = 2] = "HasMouseCursors";
	    ImGuiBackendFlags[ImGuiBackendFlags["HasSetMousePos"] = 4] = "HasSetMousePos";
	    ImGuiBackendFlags[ImGuiBackendFlags["RendererHasVtxOffset"] = 8] = "RendererHasVtxOffset";
	})(ImGuiBackendFlags || (ImGuiBackendFlags = {}));
	var ImGuiColorEditFlags;
	(function (ImGuiColorEditFlags) {
	    ImGuiColorEditFlags[ImGuiColorEditFlags["None"] = 0] = "None";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["NoAlpha"] = 2] = "NoAlpha";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["NoPicker"] = 4] = "NoPicker";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["NoOptions"] = 8] = "NoOptions";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["NoSmallPreview"] = 16] = "NoSmallPreview";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["NoInputs"] = 32] = "NoInputs";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["NoTooltip"] = 64] = "NoTooltip";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["NoLabel"] = 128] = "NoLabel";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["NoSidePreview"] = 256] = "NoSidePreview";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["NoDragDrop"] = 512] = "NoDragDrop";
	    // User Options (right-click on widget to change some of them). You can set application defaults using SetColorEditOptions(). The idea is that you probably don't want to override them in most of your calls, let the user choose and/or call SetColorEditOptions() during startup.
	    ImGuiColorEditFlags[ImGuiColorEditFlags["AlphaBar"] = 65536] = "AlphaBar";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["AlphaPreview"] = 131072] = "AlphaPreview";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["AlphaPreviewHalf"] = 262144] = "AlphaPreviewHalf";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["HDR"] = 524288] = "HDR";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["DisplayRGB"] = 1048576] = "DisplayRGB";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["DisplayHSV"] = 2097152] = "DisplayHSV";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["DisplayHex"] = 4194304] = "DisplayHex";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["Uint8"] = 8388608] = "Uint8";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["Float"] = 16777216] = "Float";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["PickerHueBar"] = 33554432] = "PickerHueBar";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["PickerHueWheel"] = 67108864] = "PickerHueWheel";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["InputRGB"] = 134217728] = "InputRGB";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["InputHSV"] = 268435456] = "InputHSV";
	    // Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to
	    // override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.
	    ImGuiColorEditFlags[ImGuiColorEditFlags["_OptionsDefault"] = 177209344] = "_OptionsDefault";
	    // [Internal] Masks
	    ImGuiColorEditFlags[ImGuiColorEditFlags["_DisplayMask"] = 7340032] = "_DisplayMask";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["_DataTypeMask"] = 25165824] = "_DataTypeMask";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["_PickerMask"] = 100663296] = "_PickerMask";
	    ImGuiColorEditFlags[ImGuiColorEditFlags["_InputMask"] = 402653184] = "_InputMask";
	})(ImGuiColorEditFlags || (ImGuiColorEditFlags = {}));
	var ImGuiMouseCursor;
	(function (ImGuiMouseCursor) {
	    ImGuiMouseCursor[ImGuiMouseCursor["None"] = -1] = "None";
	    ImGuiMouseCursor[ImGuiMouseCursor["Arrow"] = 0] = "Arrow";
	    ImGuiMouseCursor[ImGuiMouseCursor["TextInput"] = 1] = "TextInput";
	    ImGuiMouseCursor[ImGuiMouseCursor["ResizeAll"] = 2] = "ResizeAll";
	    ImGuiMouseCursor[ImGuiMouseCursor["ResizeNS"] = 3] = "ResizeNS";
	    ImGuiMouseCursor[ImGuiMouseCursor["ResizeEW"] = 4] = "ResizeEW";
	    ImGuiMouseCursor[ImGuiMouseCursor["ResizeNESW"] = 5] = "ResizeNESW";
	    ImGuiMouseCursor[ImGuiMouseCursor["ResizeNWSE"] = 6] = "ResizeNWSE";
	    ImGuiMouseCursor[ImGuiMouseCursor["Hand"] = 7] = "Hand";
	    ImGuiMouseCursor[ImGuiMouseCursor["Count_"] = 8] = "Count_";
	    ImGuiMouseCursor[ImGuiMouseCursor["COUNT"] = 8] = "COUNT";
	})(ImGuiMouseCursor || (ImGuiMouseCursor = {}));
	var ImGuiCond;
	(function (ImGuiCond) {
	    ImGuiCond[ImGuiCond["Always"] = 1] = "Always";
	    ImGuiCond[ImGuiCond["Once"] = 2] = "Once";
	    ImGuiCond[ImGuiCond["FirstUseEver"] = 4] = "FirstUseEver";
	    ImGuiCond[ImGuiCond["Appearing"] = 8] = "Appearing";
	})(ImGuiCond || (ImGuiCond = {}));
	var ImDrawCornerFlags;
	(function (ImDrawCornerFlags) {
	    ImDrawCornerFlags[ImDrawCornerFlags["TopLeft"] = 1] = "TopLeft";
	    ImDrawCornerFlags[ImDrawCornerFlags["TopRight"] = 2] = "TopRight";
	    ImDrawCornerFlags[ImDrawCornerFlags["BotLeft"] = 4] = "BotLeft";
	    ImDrawCornerFlags[ImDrawCornerFlags["BotRight"] = 8] = "BotRight";
	    ImDrawCornerFlags[ImDrawCornerFlags["Top"] = 3] = "Top";
	    ImDrawCornerFlags[ImDrawCornerFlags["Bot"] = 12] = "Bot";
	    ImDrawCornerFlags[ImDrawCornerFlags["Left"] = 5] = "Left";
	    ImDrawCornerFlags[ImDrawCornerFlags["Right"] = 10] = "Right";
	    ImDrawCornerFlags[ImDrawCornerFlags["All"] = 15] = "All";
	})(ImDrawCornerFlags || (ImDrawCornerFlags = {}));
	var ImDrawListFlags;
	(function (ImDrawListFlags) {
	    ImDrawListFlags[ImDrawListFlags["None"] = 0] = "None";
	    ImDrawListFlags[ImDrawListFlags["AntiAliasedLines"] = 1] = "AntiAliasedLines";
	    ImDrawListFlags[ImDrawListFlags["AntiAliasedFill"] = 2] = "AntiAliasedFill";
	})(ImDrawListFlags || (ImDrawListFlags = {}));
	class ImVec2 {
	    constructor(x = 0.0, y = 0.0) {
	        this.x = x;
	        this.y = y;
	    }
	    Set(x, y) {
	        this.x = x;
	        this.y = y;
	        return this;
	    }
	    Copy(other) {
	        this.x = other.x;
	        this.y = other.y;
	        return this;
	    }
	    Equals(other) {
	        if (this.x !== other.x) {
	            return false;
	        }
	        if (this.y !== other.y) {
	            return false;
	        }
	        return true;
	    }
	}
	ImVec2.ZERO = new ImVec2(0.0, 0.0);
	ImVec2.UNIT = new ImVec2(1.0, 1.0);
	ImVec2.UNIT_X = new ImVec2(1.0, 0.0);
	ImVec2.UNIT_Y = new ImVec2(0.0, 1.0);
	class ImVec4 {
	    constructor(x = 0.0, y = 0.0, z = 0.0, w = 1.0) {
	        this.x = x;
	        this.y = y;
	        this.z = z;
	        this.w = w;
	    }
	    Set(x, y, z, w) {
	        this.x = x;
	        this.y = y;
	        this.z = z;
	        this.w = w;
	        return this;
	    }
	    Copy(other) {
	        this.x = other.x;
	        this.y = other.y;
	        this.z = other.z;
	        this.w = other.w;
	        return this;
	    }
	    Equals(other) {
	        if (this.x !== other.x) {
	            return false;
	        }
	        if (this.y !== other.y) {
	            return false;
	        }
	        if (this.z !== other.z) {
	            return false;
	        }
	        if (this.w !== other.w) {
	            return false;
	        }
	        return true;
	    }
	}
	ImVec4.ZERO = new ImVec4(0.0, 0.0, 0.0, 0.0);
	ImVec4.UNIT = new ImVec4(1.0, 1.0, 1.0, 1.0);
	ImVec4.UNIT_X = new ImVec4(1.0, 0.0, 0.0, 0.0);
	ImVec4.UNIT_Y = new ImVec4(0.0, 1.0, 0.0, 0.0);
	ImVec4.UNIT_Z = new ImVec4(0.0, 0.0, 1.0, 0.0);
	ImVec4.UNIT_W = new ImVec4(0.0, 0.0, 0.0, 1.0);
	ImVec4.BLACK = new ImVec4(0.0, 0.0, 0.0, 1.0);
	ImVec4.WHITE = new ImVec4(1.0, 1.0, 1.0, 1.0);
	//-----------------------------------------------------------------------------
	// Helpers
	//-----------------------------------------------------------------------------
	// Lightweight std::vector<> like class to avoid dragging dependencies (also: windows implementation of STL with debug enabled is absurdly slow, so let's bypass it so our code runs fast in debug).
	// Our implementation does NOT call C++ constructors/destructors. This is intentional and we do not require it. Do not use this class as a straight std::vector replacement in your code!
	class ImVector extends Array {
	    constructor() {
	        super(...arguments);
	        this.Data = this;
	        // public:
	        // int                         Size;
	        // int                         Capacity;
	        // T*                          Data;
	        // typedef T                   value_type;
	        // typedef value_type*         iterator;
	        // typedef const value_type*   const_iterator;
	        // inline ImVector()           { Size = Capacity = 0; Data = NULL; }
	        // inline ~ImVector()          { if (Data) ImGui::MemFree(Data); }
	        // inline bool                 empty() const                   { return Size == 0; }
	        // inline int                  size() const                    { return Size; }
	        // inline int                  capacity() const                { return Capacity; }
	        // inline value_type&          operator[](int i)               { IM_ASSERT(i < Size); return Data[i]; }
	        // inline const value_type&    operator[](int i) const         { IM_ASSERT(i < Size); return Data[i]; }
	        // inline void                 clear()                         { if (Data) { Size = Capacity = 0; ImGui::MemFree(Data); Data = NULL; } }
	        // inline iterator             begin()                         { return Data; }
	        // inline const_iterator       begin() const                   { return Data; }
	        // inline iterator             end()                           { return Data + Size; }
	        // inline const_iterator       end() const                     { return Data + Size; }
	        // inline value_type&          front()                         { IM_ASSERT(Size > 0); return Data[0]; }
	        // inline const value_type&    front() const                   { IM_ASSERT(Size > 0); return Data[0]; }
	        // inline value_type&          back()                          { IM_ASSERT(Size > 0); return Data[Size - 1]; }
	        // inline const value_type&    back() const                    { IM_ASSERT(Size > 0); return Data[Size - 1]; }
	        // inline void                 swap(ImVector<T>& rhs)          { int rhs_size = rhs.Size; rhs.Size = Size; Size = rhs_size; int rhs_cap = rhs.Capacity; rhs.Capacity = Capacity; Capacity = rhs_cap; value_type* rhs_data = rhs.Data; rhs.Data = Data; Data = rhs_data; }
	        // inline int                  _grow_capacity(int size) const  { int new_capacity = Capacity ? (Capacity + Capacity/2) : 8; return new_capacity > size ? new_capacity : size; }
	        // inline void                 resize(int new_size)            { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }
	        // inline void                 resize(int new_size, const T& v){ if (new_size > Capacity) reserve(_grow_capacity(new_size)); if (new_size > Size) for (int n = Size; n < new_size; n++) Data[n] = v; Size = new_size; }
	        // inline void                 reserve(int new_capacity)
	        // {
	        //     if (new_capacity <= Capacity)
	        //         return;
	        //     T* new_data = (value_type*)ImGui::MemAlloc((size_t)new_capacity * sizeof(T));
	        //     if (Data)
	        //         memcpy(new_data, Data, (size_t)Size * sizeof(T));
	        //     ImGui::MemFree(Data);
	        //     Data = new_data;
	        //     Capacity = new_capacity;
	        // }
	        // inline void                 push_back(const value_type& v)  { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); Data[Size++] = v; }
	        // inline void                 pop_back()                      { IM_ASSERT(Size > 0); Size--; }
	        // inline void                 push_front(const value_type& v) { if (Size == 0) push_back(v); else insert(Data, v); }
	        // inline iterator             erase(const_iterator it)                        { IM_ASSERT(it >= Data && it < Data+Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(value_type)); Size--; return Data + off; }
	        // inline iterator             erase(const_iterator it, const_iterator it_last){ IM_ASSERT(it >= Data && it < Data+Size && it_last > it && it_last <= Data+Size); const ptrdiff_t count = it_last - it; const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + count, ((size_t)Size - (size_t)off - count) * sizeof(value_type)); Size -= (int)count; return Data + off; }
	        // inline iterator             erase_unsorted(const_iterator it)               { IM_ASSERT(it >= Data && it < Data+Size);  const ptrdiff_t off = it - Data; if (it < Data+Size-1) memcpy(Data + off, Data + Size - 1, sizeof(value_type)); Size--; return Data + off; }
	        // inline iterator             insert(const_iterator it, const value_type& v)  { IM_ASSERT(it >= Data && it <= Data+Size); const ptrdiff_t off = it - Data; if (Size == Capacity) reserve(_grow_capacity(Size + 1)); if (off < (int)Size) memmove(Data + off + 1, Data + off, ((size_t)Size - (size_t)off) * sizeof(value_type)); Data[off] = v; Size++; return Data + off; }
	        // inline bool                 contains(const value_type& v) const             { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data++ == v) return true; return false; }
	    }
	    get Size() { return this.length; }
	    empty() { return this.length === 0; }
	    clear() { this.length = 0; }
	    pop_back() { return this.pop(); }
	    push_back(value) { this.push(value); }
	}
	// Typically, 1 command = 1 GPU draw call (unless command is a callback)
	// Pre 1.71 back-ends will typically ignore the VtxOffset/IdxOffset fields. When 'io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset'
	// is enabled, those fields allow us to render meshes larger than 64K vertices while keeping 16-bits indices.
	class ImDrawCmd {
	    constructor(native) {
	        this.native = native;
	        // ImDrawCallback  UserCallback;           // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.
	        this.UserCallback = null; // TODO
	        // void*           UserCallbackData;       // The draw callback code can access this.
	        this.UserCallbackData = null; // TODO
	    }
	    // unsigned int    ElemCount;              // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].
	    get ElemCount() { return this.native.ElemCount; }
	    // ImVec4          ClipRect;               // Clipping rectangle (x1, y1, x2, y2)
	    get ClipRect() { return this.native.ClipRect; }
	    // ImTextureID     TextureId;              // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.
	    get TextureId() {
	        return ImGuiContext.getTexture(this.native.TextureId);
	    }
	    // unsigned int    VtxOffset;              // Start offset in vertex buffer. Pre-1.71 or without ImGuiBackendFlags_RendererHasVtxOffset: always 0. With ImGuiBackendFlags_RendererHasVtxOffset: may be >0 to support meshes larger than 64K vertices with 16-bits indices.
	    get VtxOffset() { return this.native.VtxOffset; }
	    // unsigned int    IdxOffset;              // Start offset in index buffer. Always equal to sum of ElemCount drawn so far.
	    get IdxOffset() { return this.native.IdxOffset; }
	}
	// Vertex index 
	// (to allow large meshes with 16-bits indices: set 'io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset' and handle ImDrawCmd::VtxOffset in the renderer back-end)
	// (to use 32-bits indices: override with '#define ImDrawIdx unsigned int' in imconfig.h)
	// #ifndef ImDrawIdx
	// typedef unsigned short ImDrawIdx;
	// #endif
	const ImDrawIdxSize = 2; // bind.ImDrawIdxSize;
	// Vertex layout
	// #ifndef IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT
	const ImDrawVertSize = 20; // bind.ImDrawVertSize;
	const ImDrawVertPosOffset = 0; // bind.ImDrawVertPosOffset;
	const ImDrawVertUVOffset = 8; // bind.ImDrawVertUVOffset;
	const ImDrawVertColOffset = 16; // bind.ImDrawVertColOffset;
	class ImDrawVert {
	    constructor(buffer, byteOffset = 0) {
	        this.pos = new Float32Array(buffer, byteOffset + bind.ImDrawVertPosOffset, 2);
	        this.uv = new Float32Array(buffer, byteOffset + bind.ImDrawVertUVOffset, 2);
	        this.col = new Uint32Array(buffer, byteOffset + bind.ImDrawVertColOffset, 1);
	    }
	}
	// Draw command list
	// This is the low-level list of polygons that ImGui functions are filling. At the end of the frame, all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.
	// Each ImGui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to access the current window draw list and draw custom primitives.
	// You can interleave normal ImGui:: calls and adding primitives to the current draw list.
	// All positions are generally in pixel coordinates (top-left at (0,0), bottom-right at io.DisplaySize), however you are totally free to apply whatever transformation matrix to want to the data (if you apply such transformation you'll want to apply it to ClipRect as well)
	// Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.
	class ImDrawList {
	    constructor(native) {
	        this.native = native;
	    }
	    IterateDrawCmds(callback) {
	        this.native.IterateDrawCmds((draw_cmd, ElemStart) => {
	            callback(new ImDrawCmd(draw_cmd), ElemStart);
	        });
	    }
	    // This is what you have to render
	    // ImVector<ImDrawCmd>     CmdBuffer;          // Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.
	    // ImVector<ImDrawIdx>     IdxBuffer;          // Index buffer. Each command consume ImDrawCmd::ElemCount of those
	    get IdxBuffer() { return this.native.IdxBuffer; }
	    // ImVector<ImDrawVert>    VtxBuffer;          // Vertex buffer.
	    get VtxBuffer() { return this.native.VtxBuffer; }
	    // ImDrawListFlags         Flags;              // Flags, you may poke into these to adjust anti-aliasing settings per-primitive.
	    get Flags() { return this.native.Flags; }
	    set Flags(value) { this.native.Flags = value; }
	    // [Internal, used while building lists]
	    // const ImDrawListSharedData* _Data;          // Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)
	    // const char*             _OwnerName;         // Pointer to owner window's name for debugging
	    // unsigned int            _VtxCurrentIdx;     // [Internal] == VtxBuffer.Size
	    // ImDrawVert*             _VtxWritePtr;       // [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
	    // ImDrawIdx*              _IdxWritePtr;       // [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
	    // ImVector<ImVec4>        _ClipRectStack;     // [Internal]
	    // ImVector<ImTextureID>   _TextureIdStack;    // [Internal]
	    // ImVector<ImVec2>        _Path;              // [Internal] current path building
	    // int                     _ChannelsCurrent;   // [Internal] current channel number (0)
	    // int                     _ChannelsCount;     // [Internal] number of active channels (1+)
	    // ImVector<ImDrawChannel> _Channels;          // [Internal] draw channels for columns API (not resized down so _ChannelsCount may be smaller than _Channels.Size)
	    // ImDrawList(const ImDrawListSharedData* shared_data) { _Data = shared_data; _OwnerName = NULL; Clear(); }
	    // ~ImDrawList() { ClearFreeMemory(); }
	    // IMGUI_API void  PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect = false);  // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
	    PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect = false) {
	        this.native.PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
	    }
	    // IMGUI_API void  PushClipRectFullScreen();
	    PushClipRectFullScreen() { this.native.PushClipRectFullScreen(); }
	    // IMGUI_API void  PopClipRect();
	    PopClipRect() { this.native.PopClipRect(); }
	    // IMGUI_API void  PushTextureID(ImTextureID texture_id);
	    PushTextureID(texture_id) {
	        this.native.PushTextureID(ImGuiContext.setTexture(texture_id));
	    }
	    // IMGUI_API void  PopTextureID();
	    PopTextureID() { this.native.PopTextureID(); }
	    // inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.x, cr.y); }
	    GetClipRectMin(out = new ImVec2()) {
	        return this.native.GetClipRectMin(out);
	    }
	    // inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.z, cr.w); }
	    GetClipRectMax(out = new ImVec2()) {
	        return this.native.GetClipRectMax(out);
	    }
	    // Primitives
	    // IMGUI_API void  AddLine(const ImVec2& a, const ImVec2& b, ImU32 col, float thickness = 1.0f);
	    AddLine(a, b, col, thickness = 1.0) {
	        this.native.AddLine(a, b, col, thickness);
	    }
	    // IMGUI_API void  AddRect(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All, float thickness = 1.0f);   // a: upper-left, b: lower-right, rounding_corners_flags: 4-bits corresponding to which corner to round
	    AddRect(a, b, col, rounding = 0.0, rounding_corners_flags = ImDrawCornerFlags.All, thickness = 1.0) {
	        this.native.AddRect(a, b, col, rounding, rounding_corners_flags, thickness);
	    }
	    // IMGUI_API void  AddRectFilled(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All);                     // a: upper-left, b: lower-right
	    AddRectFilled(a, b, col, rounding = 0.0, rounding_corners_flags = ImDrawCornerFlags.All) {
	        this.native.AddRectFilled(a, b, col, rounding, rounding_corners_flags);
	    }
	    // IMGUI_API void  AddRectFilledMultiColor(const ImVec2& a, const ImVec2& b, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);
	    AddRectFilledMultiColor(a, b, col_upr_left, col_upr_right, col_bot_right, col_bot_left) {
	        this.native.AddRectFilledMultiColor(a, b, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
	    }
	    // IMGUI_API void  AddQuad(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col, float thickness = 1.0f);
	    AddQuad(a, b, c, d, col, thickness = 1.0) {
	        this.native.AddQuad(a, b, c, d, col, thickness);
	    }
	    // IMGUI_API void  AddQuadFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col);
	    AddQuadFilled(a, b, c, d, col) {
	        this.native.AddQuadFilled(a, b, c, d, col);
	    }
	    // IMGUI_API void  AddTriangle(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col, float thickness = 1.0f);
	    AddTriangle(a, b, c, col, thickness = 1.0) {
	        this.native.AddTriangle(a, b, c, col, thickness);
	    }
	    // IMGUI_API void  AddTriangleFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col);
	    AddTriangleFilled(a, b, c, col) {
	        this.native.AddTriangleFilled(a, b, c, col);
	    }
	    // IMGUI_API void  AddCircle(const ImVec2& centre, float radius, ImU32 col, int num_segments = 12, float thickness = 1.0f);
	    AddCircle(centre, radius, col, num_segments = 12, thickness = 1.0) {
	        this.native.AddCircle(centre, radius, col, num_segments, thickness);
	    }
	    // IMGUI_API void  AddCircleFilled(const ImVec2& centre, float radius, ImU32 col, int num_segments = 12);
	    AddCircleFilled(centre, radius, col, num_segments = 12) {
	        this.native.AddCircleFilled(centre, radius, col, num_segments);
	    }
	    AddText(...args) {
	        if (args[0] instanceof ImFont) {
	            const font = args[0];
	            const font_size = args[1];
	            const pos = args[2];
	            const col = args[3];
	            const text_begin = args[4];
	            const text_end = args[5] || null;
	            const wrap_width = args[6] = 0.0;
	            const cpu_fine_clip_rect = args[7] || null;
	            this.native.AddText_B(font.native, font_size, pos, col, text_end !== null ? text_begin.substring(0, text_end) : text_begin, wrap_width, cpu_fine_clip_rect);
	        }
	        else {
	            const pos = args[0];
	            const col = args[1];
	            const text_begin = args[2];
	            const text_end = args[3] || null;
	            this.native.AddText_A(pos, col, text_end !== null ? text_begin.substring(0, text_end) : text_begin);
	        }
	    }
	    // IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a = ImVec2(0,0), const ImVec2& uv_b = ImVec2(1,1), ImU32 col = 0xFFFFFFFF);
	    AddImage(user_texture_id, a, b, uv_a = ImVec2.ZERO, uv_b = ImVec2.UNIT, col = 0xFFFFFFFF) {
	        this.native.AddImage(ImGuiContext.setTexture(user_texture_id), a, b, uv_a, uv_b, col);
	    }
	    // IMGUI_API void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a = ImVec2(0,0), const ImVec2& uv_b = ImVec2(1,0), const ImVec2& uv_c = ImVec2(1,1), const ImVec2& uv_d = ImVec2(0,1), ImU32 col = 0xFFFFFFFF);
	    AddImageQuad(user_texture_id, a, b, c, d, uv_a = ImVec2.ZERO, uv_b = ImVec2.UNIT_X, uv_c = ImVec2.UNIT, uv_d = ImVec2.UNIT_Y, col = 0xFFFFFFFF) {
	        this.native.AddImageQuad(ImGuiContext.setTexture(user_texture_id), a, b, c, d, uv_a, uv_b, uv_c, uv_d, col);
	    }
	    // IMGUI_API void  AddImageRounded(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col, float rounding, int rounding_corners = ImDrawCornerFlags_All);
	    AddImageRounded(user_texture_id, a, b, uv_a, uv_b, col, rounding, rounding_corners = ImDrawCornerFlags.All) {
	        this.native.AddImageRounded(ImGuiContext.setTexture(user_texture_id), a, b, uv_a, uv_b, col, rounding, rounding_corners);
	    }
	    // IMGUI_API void  AddPolyline(const ImVec2* points, const int num_points, ImU32 col, bool closed, float thickness);
	    AddPolyline(points, num_points, col, closed, thickness) {
	        this.native.AddPolyline(points, num_points, col, closed, thickness);
	    }
	    // IMGUI_API void  AddConvexPolyFilled(const ImVec2* points, const int num_points, ImU32 col);
	    AddConvexPolyFilled(points, num_points, col) {
	        this.native.AddConvexPolyFilled(points, num_points, col);
	    }
	    // IMGUI_API void  AddBezierCurve(const ImVec2& pos0, const ImVec2& cp0, const ImVec2& cp1, const ImVec2& pos1, ImU32 col, float thickness, int num_segments = 0);
	    AddBezierCurve(pos0, cp0, cp1, pos1, col, thickness = 1.0, num_segments = 0) {
	        this.native.AddBezierCurve(pos0, cp0, cp1, pos1, col, thickness, num_segments);
	    }
	    // Stateful path API, add points then finish with PathFill() or PathStroke()
	    // inline    void  PathClear()                                                 { _Path.resize(0); }
	    PathClear() { this.native.PathClear(); }
	    // inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_back(pos); }
	    PathLineTo(pos) { this.native.PathLineTo(pos); }
	    // inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size == 0 || memcmp(&_Path[_Path.Size-1], &pos, 8) != 0) _Path.push_back(pos); }
	    PathLineToMergeDuplicate(pos) { this.native.PathLineToMergeDuplicate(pos); }
	    // inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyFilled(_Path.Data, _Path.Size, col); PathClear(); }
	    PathFillConvex(col) { this.native.PathFillConvex(col); }
	    // inline    void  PathStroke(ImU32 col, bool closed, float thickness = 1.0f)  { AddPolyline(_Path.Data, _Path.Size, col, closed, thickness); PathClear(); }
	    PathStroke(col, closed, thickness = 1.0) { this.native.PathStroke(col, closed, thickness); }
	    // IMGUI_API void  PathArcTo(const ImVec2& centre, float radius, float a_min, float a_max, int num_segments = 10);
	    PathArcTo(centre, radius, a_min, a_max, num_segments = 10) { this.native.PathArcTo(centre, radius, a_min, a_max, num_segments); }
	    // IMGUI_API void  PathArcToFast(const ImVec2& centre, float radius, int a_min_of_12, int a_max_of_12);                                // Use precomputed angles for a 12 steps circle
	    PathArcToFast(centre, radius, a_min_of_12, a_max_of_12) { this.native.PathArcToFast(centre, radius, a_min_of_12, a_max_of_12); }
	    // IMGUI_API void  PathBezierCurveTo(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, int num_segments = 0);
	    PathBezierCurveTo(p1, p2, p3, num_segments = 0) { this.native.PathBezierCurveTo(p1, p2, p3, num_segments); }
	    // IMGUI_API void  PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All);
	    PathRect(rect_min, rect_max, rounding = 0.0, rounding_corners_flags = ImDrawCornerFlags.All) { this.native.PathRect(rect_min, rect_max, rounding, rounding_corners_flags); }
	    // Channels
	    // - Use to simulate layers. By switching channels to can render out-of-order (e.g. submit foreground primitives before background primitives)
	    // - Use to minimize draw calls (e.g. if going back-and-forth between multiple non-overlapping clipping rectangles, prefer to append into separate channels then merge at the end)
	    // IMGUI_API void  ChannelsSplit(int channels_count);
	    ChannelsSplit(channels_count) { this.native.ChannelsSplit(channels_count); }
	    // IMGUI_API void  ChannelsMerge();
	    ChannelsMerge() { this.native.ChannelsMerge(); }
	    // IMGUI_API void  ChannelsSetCurrent(int channel_index);
	    ChannelsSetCurrent(channel_index) { this.native.ChannelsSetCurrent(channel_index); }
	    // Advanced
	    // IMGUI_API void  AddCallback(ImDrawCallback callback, void* callback_data);  // Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.
	    AddCallback(callback, callback_data) {
	        const _callback = (parent_list, draw_cmd) => {
	            callback(new ImDrawList(parent_list), new ImDrawCmd(draw_cmd));
	        };
	        this.native.AddCallback(_callback, callback_data);
	    }
	    // IMGUI_API void  AddDrawCmd();                                               // This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible
	    AddDrawCmd() { this.native.AddDrawCmd(); }
	    // Internal helpers
	    // NB: all primitives needs to be reserved via PrimReserve() beforehand!
	    // IMGUI_API void  Clear();
	    Clear() { this.native.Clear(); }
	    // IMGUI_API void  ClearFreeMemory();
	    ClearFreeMemory() { this.native.ClearFreeMemory(); }
	    // IMGUI_API void  PrimReserve(int idx_count, int vtx_count);
	    PrimReserve(idx_count, vtx_count) { this.native.PrimReserve(idx_count, vtx_count); }
	    // IMGUI_API void  PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col);      // Axis aligned rectangle (composed of two triangles)
	    PrimRect(a, b, col) { this.native.PrimRect(a, b, col); }
	    // IMGUI_API void  PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col);
	    PrimRectUV(a, b, uv_a, uv_b, col) { this.native.PrimRectUV(a, b, uv_a, uv_b, col); }
	    // IMGUI_API void  PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col);
	    PrimQuadUV(a, b, c, d, uv_a, uv_b, uv_c, uv_d, col) { this.native.PrimQuadUV(a, b, c, d, uv_a, uv_b, uv_c, uv_d, col); }
	    // inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col){ _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }
	    PrimWriteVtx(pos, uv, col) { this.native.PrimWriteVtx(pos, uv, col); }
	    // inline    void  PrimWriteIdx(ImDrawIdx idx)                                 { *_IdxWritePtr = idx; _IdxWritePtr++; }
	    PrimWriteIdx(idx) { this.native.PrimWriteIdx(idx); }
	    // inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)     { PrimWriteIdx((ImDrawIdx)_VtxCurrentIdx); PrimWriteVtx(pos, uv, col); }
	    PrimVtx(pos, uv, col) { this.native.PrimVtx(pos, uv, col); }
	    // IMGUI_API void  UpdateClipRect();
	    UpdateClipRect() { this.native.UpdateClipRect(); }
	    // IMGUI_API void  UpdateTextureID();
	    UpdateTextureID() { this.native.UpdateTextureID(); }
	}
	// All draw data to render an ImGui frame
	class ImDrawData {
	    constructor(native) {
	        this.native = native;
	    }
	    IterateDrawLists(callback) {
	        this.native.IterateDrawLists((draw_list) => {
	            callback(new ImDrawList(draw_list));
	        });
	    }
	    // bool            Valid;                  // Only valid after Render() is called and before the next NewFrame() is called.
	    get Valid() { return this.native.Valid; }
	    // ImDrawList**    CmdLists;
	    // int             CmdListsCount;
	    get CmdListsCount() { return this.native.CmdListsCount; }
	    // int             TotalIdxCount;          // For convenience, sum of all cmd_lists idx_buffer.Size
	    get TotalIdxCount() { return this.native.TotalIdxCount; }
	    // int             TotalVtxCount;          // For convenience, sum of all cmd_lists vtx_buffer.Size
	    get TotalVtxCount() { return this.native.TotalVtxCount; }
	    // ImVec2          DisplayPos;             // Upper-left position of the viewport to render (== upper-left of the orthogonal projection matrix to use)
	    get DisplayPos() { return this.native.DisplayPos; }
	    // ImVec2          DisplaySize;            // Size of the viewport to render (== io.DisplaySize for the main viewport) (DisplayPos + DisplaySize == lower-right of the orthogonal projection matrix to use)
	    get DisplaySize() { return this.native.DisplaySize; }
	    // ImVec2          FramebufferScale;       // Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.
	    get FramebufferScale() { return this.native.FramebufferScale; }
	    // Functions
	    // ImDrawData() { Valid = false; CmdLists = NULL; CmdListsCount = TotalVtxCount = TotalIdxCount = 0; }
	    // IMGUI_API void DeIndexAllBuffers();               // For backward compatibility or convenience: convert all buffers from indexed to de-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!
	    DeIndexAllBuffers() { this.native.DeIndexAllBuffers(); }
	    // IMGUI_API void ScaleClipRects(const ImVec2& fb_scale);  // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.
	    ScaleClipRects(fb_scale) {
	        this.native.ScaleClipRects(fb_scale);
	    }
	}
	class script_ImFontConfig {
	    constructor() {
	        // void*           FontData;                   //          // TTF/OTF data
	        // int             FontDataSize;               //          // TTF/OTF data size
	        this.FontData = null;
	        // bool            FontDataOwnedByAtlas;       // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).
	        this.FontDataOwnedByAtlas = true;
	        // int             FontNo;                     // 0        // Index of font within TTF/OTF file
	        this.FontNo = 0;
	        // float           SizePixels;                 //          // Size in pixels for rasterizer.
	        this.SizePixels = 0;
	        // int             OversampleH, OversampleV;   // 3, 1     // Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.
	        this.OversampleH = 3;
	        this.OversampleV = 1;
	        // bool            PixelSnapH;                 // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.
	        this.PixelSnapH = false;
	        // ImVec2          GlyphExtraSpacing;          // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.
	        this.GlyphExtraSpacing = new ImVec2(0, 0);
	        // ImVec2          GlyphOffset;                // 0, 0     // Offset all glyphs from this font input.
	        this.GlyphOffset = new ImVec2(0, 0);
	        // const ImWchar*  GlyphRanges;                // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.
	        this.GlyphRanges = null;
	        // float           GlyphMinAdvanceX;           // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font
	        this.GlyphMinAdvanceX = 0;
	        // float           GlyphMaxAdvanceX;           // FLT_MAX  // Maximum AdvanceX for glyphs
	        this.GlyphMaxAdvanceX = Number.MAX_VALUE;
	        // bool            MergeMode;                  // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.
	        this.MergeMode = false;
	        // unsigned int    RasterizerFlags;            // 0x00     // Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.
	        this.RasterizerFlags = 0;
	        // float           RasterizerMultiply;         // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.
	        this.RasterizerMultiply = 1.0;
	        // [Internal]
	        // char            Name[32];                               // Name (strictly to ease debugging)
	        this.Name = "";
	        // ImFont*         DstFont;
	        this.DstFont = null;
	        // IMGUI_API ImFontConfig();
	    }
	}
	class ImFontConfig {
	    constructor(internal = new script_ImFontConfig()) {
	        this.internal = internal;
	    }
	    // void*           FontData;                   //          // TTF/OTF data
	    // int             FontDataSize;               //          // TTF/OTF data size
	    get FontData() { return this.internal.FontData; }
	    // bool            FontDataOwnedByAtlas;       // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).
	    get FontDataOwnedByAtlas() { return this.internal.FontDataOwnedByAtlas; }
	    // int             FontNo;                     // 0        // Index of font within TTF/OTF file
	    get FontNo() { return this.internal.FontNo; }
	    // float           SizePixels;                 //          // Size in pixels for rasterizer.
	    get SizePixels() { return this.internal.SizePixels; }
	    // int             OversampleH, OversampleV;   // 3, 1     // Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.
	    get OversampleH() { return this.internal.OversampleH; }
	    get OversampleV() { return this.internal.OversampleV; }
	    // bool            PixelSnapH;                 // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.
	    get PixelSnapH() { return this.internal.PixelSnapH; }
	    // ImVec2          GlyphExtraSpacing;          // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.
	    get GlyphExtraSpacing() { return this.internal.GlyphExtraSpacing; }
	    // ImVec2          GlyphOffset;                // 0, 0     // Offset all glyphs from this font input.
	    get GlyphOffset() { return this.internal.GlyphOffset; }
	    // const ImWchar*  GlyphRanges;                // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.
	    get GlyphRanges() { return this.internal.GlyphRanges; }
	    // float           GlyphMinAdvanceX;           // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font
	    get GlyphMinAdvanceX() { return this.internal.GlyphMinAdvanceX; }
	    // float           GlyphMaxAdvanceX;           // FLT_MAX  // Maximum AdvanceX for glyphs
	    get GlyphMaxAdvanceX() { return this.internal.GlyphMaxAdvanceX; }
	    // bool            MergeMode;                  // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.
	    get MergeMode() { return this.internal.MergeMode; }
	    // unsigned int    RasterizerFlags;            // 0x00     // Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.
	    get RasterizerFlags() { return this.internal.RasterizerFlags; }
	    // float           RasterizerMultiply;         // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.
	    get RasterizerMultiply() { return this.internal.RasterizerMultiply; }
	    // [Internal]
	    // char            Name[32];                               // Name (strictly to ease debugging)
	    get Name() { return this.internal.Name; }
	    set Name(value) { this.internal.Name = value; }
	    // ImFont*         DstFont;
	    get DstFont() {
	        const font = this.internal.DstFont;
	        return font && new ImFont(font);
	    }
	}
	// struct ImFontGlyph
	class script_ImFontGlyph {
	    constructor() {
	        // ImWchar         Codepoint;          // 0x0000..0xFFFF
	        this.Codepoint = 0;
	        // float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
	        this.AdvanceX = 0.0;
	        // float           X0, Y0, X1, Y1;     // Glyph corners
	        this.X0 = 0.0;
	        this.Y0 = 0.0;
	        this.X1 = 1.0;
	        this.Y1 = 1.0;
	        // float           U0, V0, U1, V1;     // Texture coordinates
	        this.U0 = 0.0;
	        this.V0 = 0.0;
	        this.U1 = 1.0;
	        this.V1 = 1.0;
	    }
	}
	class ImFontGlyph {
	    constructor(internal = new script_ImFontGlyph()) {
	        this.internal = internal;
	    }
	    // ImWchar         Codepoint;          // 0x0000..0xFFFF
	    get Codepoint() { return this.internal.Codepoint; }
	    // float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
	    get AdvanceX() { return this.internal.AdvanceX; }
	    ;
	    // float           X0, Y0, X1, Y1;     // Glyph corners
	    get X0() { return this.internal.X0; }
	    ;
	    get Y0() { return this.internal.Y0; }
	    ;
	    get X1() { return this.internal.X1; }
	    ;
	    get Y1() { return this.internal.Y1; }
	    ;
	    // float           U0, V0, U1, V1;     // Texture coordinates
	    get U0() { return this.internal.U0; }
	    ;
	    get V0() { return this.internal.V0; }
	    ;
	    get U1() { return this.internal.U1; }
	    ;
	    get V1() { return this.internal.V1; }
	    ;
	}
	var ImFontAtlasFlags;
	(function (ImFontAtlasFlags) {
	    ImFontAtlasFlags[ImFontAtlasFlags["None"] = 0] = "None";
	    ImFontAtlasFlags[ImFontAtlasFlags["NoPowerOfTwoHeight"] = 1] = "NoPowerOfTwoHeight";
	    ImFontAtlasFlags[ImFontAtlasFlags["NoMouseCursors"] = 2] = "NoMouseCursors";
	})(ImFontAtlasFlags || (ImFontAtlasFlags = {}));
	// Load and rasterize multiple TTF/OTF fonts into a same texture.
	// Sharing a texture for multiple fonts allows us to reduce the number of draw calls during rendering.
	// We also add custom graphic data into the texture that serves for ImGui.
	//  1. (Optional) Call AddFont*** functions. If you don't call any, the default font will be loaded for you.
	//  2. Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.
	//  3. Upload the pixels data into a texture within your graphics system.
	//  4. Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture. This value will be passed back to you during rendering to identify the texture.
	// IMPORTANT: If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the ImFont is build (when calling GetTextData*** or Build()). We only copy the pointer, not the data.
	class ImFontAtlas {
	    constructor(native) {
	        this.native = native;
	    }
	    // IMGUI_API ImFontAtlas();
	    // IMGUI_API ~ImFontAtlas();
	    // IMGUI_API ImFont*           AddFont(const ImFontConfig* font_cfg);
	    // IMGUI_API ImFont*           AddFontDefault(const ImFontConfig* font_cfg = NULL);
	    AddFontDefault(font_cfg = null) {
	        return new ImFont(this.native.AddFontDefault(font_cfg));
	    }
	    // IMGUI_API ImFont*           AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);
	    // IMGUI_API ImFont*           AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after Build(). Set font_cfg->FontDataOwnedByAtlas to false to keep ownership.
	    AddFontFromMemoryTTF(data, size_pixels, font_cfg = null, glyph_ranges = null) {
	        return new ImFont(this.native.AddFontFromMemoryTTF(new Uint8Array(data), size_pixels, font_cfg && font_cfg.internal, glyph_ranges));
	    }
	    // IMGUI_API ImFont*           AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.
	    // IMGUI_API ImFont*           AddFontFromMemoryCompressedBase85TTF(const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);              // 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.
	    // IMGUI_API void              ClearTexData();             // Clear the CPU-side texture data. Saves RAM once the texture has been copied to graphics memory.
	    ClearTexData() { this.native.ClearTexData(); }
	    // IMGUI_API void              ClearInputData();           // Clear the input TTF data (inc sizes, glyph ranges)
	    ClearInputData() { this.native.ClearInputData(); }
	    // IMGUI_API void              ClearFonts();               // Clear the ImGui-side font data (glyphs storage, UV coordinates)
	    ClearFonts() { this.native.ClearFonts(); }
	    // IMGUI_API void              Clear();                    // Clear all
	    Clear() { this.native.Clear(); }
	    // Build atlas, retrieve pixel data.
	    // User is in charge of copying the pixels into graphics memory (e.g. create a texture with your engine). Then store your texture handle with SetTexID().
	    // RGBA32 format is provided for convenience and compatibility, but note that unless you use CustomRect to draw color data, the RGB pixels emitted from Fonts will all be white (~75% of waste).
	    // Pitch = Width * BytesPerPixels
	    // IMGUI_API bool              Build();                    // Build pixels data. This is called automatically for you by the GetTexData*** functions.
	    Build() { return this.native.Build(); }
	    // IMGUI_API bool              IsBuilt()                   { return Fonts.Size > 0 && (TexPixelsAlpha8 != NULL || TexPixelsRGBA32 != NULL); }
	    IsBuilt() { return this.native.IsBuilt(); }
	    // IMGUI_API void              GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 1 byte per-pixel
	    GetTexDataAsAlpha8() {
	        return this.native.GetTexDataAsAlpha8();
	    }
	    // IMGUI_API void              GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 4 bytes-per-pixel
	    GetTexDataAsRGBA32() {
	        return this.native.GetTexDataAsRGBA32();
	    }
	    // void                        SetTexID(ImTextureID id)    { TexID = id; }
	    SetTexID(id) { this.TexID = id; }
	    //-------------------------------------------
	    // Glyph Ranges
	    //-------------------------------------------
	    // Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)
	    // NB: Make sure that your string are UTF-8 and NOT in your local code page. In C++11, you can create UTF-8 string literal using the u8"Hello world" syntax. See FAQ for details.
	    // IMGUI_API const ImWchar*    GetGlyphRangesDefault();    // Basic Latin, Extended Latin
	    GetGlyphRangesDefault() { return this.native.GetGlyphRangesDefault(); }
	    // IMGUI_API const ImWchar*    GetGlyphRangesKorean();     // Default + Korean characters
	    GetGlyphRangesKorean() { return this.native.GetGlyphRangesKorean(); }
	    // IMGUI_API const ImWchar*    GetGlyphRangesJapanese();   // Default + Hiragana, Katakana, Half-Width, Selection of 1946 Ideographs
	    GetGlyphRangesJapanese() { return this.native.GetGlyphRangesJapanese(); }
	    // IMGUI_API const ImWchar*    GetGlyphRangesChineseFull();            // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs
	    GetGlyphRangesChineseFull() { return this.native.GetGlyphRangesChineseFull(); }
	    // IMGUI_API const ImWchar*    GetGlyphRangesChineseSimplifiedCommon();// Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese
	    GetGlyphRangesChineseSimplifiedCommon() { return this.native.GetGlyphRangesChineseSimplifiedCommon(); }
	    // IMGUI_API const ImWchar*    GetGlyphRangesCyrillic();   // Default + about 400 Cyrillic characters
	    GetGlyphRangesCyrillic() { return this.native.GetGlyphRangesCyrillic(); }
	    // IMGUI_API const ImWchar*    GetGlyphRangesThai();       // Default + Thai characters
	    GetGlyphRangesThai() { return this.native.GetGlyphRangesThai(); }
	    // IMGUI_API const ImWchar*    GetGlyphRangesVietnamese();       // Default + Vietnamese characters
	    GetGlyphRangesVietnamese() { return this.native.GetGlyphRangesVietnamese(); }
	    // Helpers to build glyph ranges from text data. Feed your application strings/characters to it then call BuildRanges().
	    // struct GlyphRangesBuilder
	    // {
	    //     ImVector<unsigned char> UsedChars;  // Store 1-bit per Unicode code point (0=unused, 1=used)
	    //     GlyphRangesBuilder()                { UsedChars.resize(0x10000 / 8); memset(UsedChars.Data, 0, 0x10000 / 8); }
	    //     bool           GetBit(int n) const  { return (UsedChars[n >> 3] & (1 << (n & 7))) != 0; }
	    //     void           SetBit(int n)        { UsedChars[n >> 3] |= 1 << (n & 7); }  // Set bit 'c' in the array
	    //     void           AddChar(ImWchar c)   { SetBit(c); }                          // Add character
	    //     IMGUI_API void AddText(const char* text, const char* text_end = NULL);      // Add string (each character of the UTF-8 string are added)
	    //     IMGUI_API void AddRanges(const ImWchar* ranges);                            // Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault) to force add all of ASCII/Latin+Ext
	    //     IMGUI_API void BuildRanges(ImVector<ImWchar>* out_ranges);                  // Output new ranges
	    // };
	    //-------------------------------------------
	    // Custom Rectangles/Glyphs API
	    //-------------------------------------------
	    // You can request arbitrary rectangles to be packed into the atlas, for your own purposes. After calling Build(), you can query the rectangle position and render your pixels.
	    // You can also request your rectangles to be mapped as font glyph (given a font + Unicode point), so you can render e.g. custom colorful icons and use them as regular glyphs.
	    // struct CustomRect
	    // {
	    //     unsigned int    ID;             // Input    // User ID. Use <0x10000 to map into a font glyph, >=0x10000 for other/internal/custom texture data.
	    //     unsigned short  Width, Height;  // Input    // Desired rectangle dimension
	    //     unsigned short  X, Y;           // Output   // Packed position in Atlas
	    //     float           GlyphAdvanceX;  // Input    // For custom font glyphs only (ID<0x10000): glyph xadvance
	    //     ImVec2          GlyphOffset;    // Input    // For custom font glyphs only (ID<0x10000): glyph display offset
	    //     ImFont*         Font;           // Input    // For custom font glyphs only (ID<0x10000): target font
	    //     CustomRect()            { ID = 0xFFFFFFFF; Width = Height = 0; X = Y = 0xFFFF; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0,0); Font = NULL; }
	    //     bool IsPacked() const   { return X != 0xFFFF; }
	    // };
	    // IMGUI_API int       AddCustomRectRegular(unsigned int id, int width, int height);                                                                   // Id needs to be >= 0x10000. Id >= 0x80000000 are reserved for ImGui and ImDrawList
	    // IMGUI_API int       AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset = ImVec2(0,0));   // Id needs to be < 0x10000 to register a rectangle to map into a specific font.
	    // IMGUI_API void      CalcCustomRectUV(const CustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max);
	    // const CustomRect*   GetCustomRectByIndex(int index) const { if (index < 0) return NULL; return &CustomRects[index]; }
	    //-------------------------------------------
	    // Members
	    //-------------------------------------------
	    // bool                        Locked;             // Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.
	    get Locked() { return this.native.Locked; }
	    set Locked(value) { this.native.Locked = value; }
	    // ImFontAtlasFlags            Flags;              // Build flags (see ImFontAtlasFlags_)
	    get Flags() { return this.native.Flags; }
	    set Flags(value) { this.native.Flags = value; }
	    // ImTextureID                 TexID;              // User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.
	    get TexID() {
	        return ImGuiContext.getTexture(this.native.TexID);
	    }
	    set TexID(value) {
	        this.native.TexID = ImGuiContext.setTexture(value);
	    }
	    // int                         TexDesiredWidth;    // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.
	    get TexDesiredWidth() { return this.native.TexDesiredWidth; }
	    set TexDesiredWidth(value) { this.native.TexDesiredWidth = value; }
	    // int                         TexGlyphPadding;    // Padding between glyphs within texture in pixels. Defaults to 1.
	    get TexGlyphPadding() { return this.native.TexGlyphPadding; }
	    set TexGlyphPadding(value) { this.native.TexGlyphPadding = value; }
	    // [Internal]
	    // NB: Access texture data via GetTexData*() calls! Which will setup a default font for you.
	    // unsigned char*              TexPixelsAlpha8;    // 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight
	    // unsigned int*               TexPixelsRGBA32;    // 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4
	    // int                         TexWidth;           // Texture width calculated during Build().
	    get TexWidth() { return this.native.TexWidth; }
	    // int                         TexHeight;          // Texture height calculated during Build().
	    get TexHeight() { return this.native.TexHeight; }
	    // ImVec2                      TexUvScale;         // = (1.0f/TexWidth, 1.0f/TexHeight)
	    get TexUvScale() { return this.native.TexUvScale; }
	    // ImVec2                      TexUvWhitePixel;    // Texture coordinates to a white pixel
	    get TexUvWhitePixel() { return this.native.TexUvWhitePixel; }
	    // ImVector<ImFont*>           Fonts;              // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.
	    get Fonts() {
	        const fonts = new ImVector();
	        this.native.IterateFonts((font) => {
	            fonts.push(new ImFont(font));
	        });
	        return fonts;
	    }
	}
	// Font runtime data and rendering
	// ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().
	class ImFont {
	    constructor(native) {
	        this.native = native;
	    }
	    // Members: Hot ~62/78 bytes
	    // float                       FontSize;           // <user set>   // Height of characters, set during loading (don't change after loading)
	    get FontSize() { return this.native.FontSize; }
	    // float                       Scale;              // = 1.f        // Base font scale, multiplied by the per-window font scale which you can adjust with SetFontScale()
	    get Scale() { return this.native.Scale; }
	    set Scale(value) { this.native.Scale = value; }
	    // ImVec2                      DisplayOffset;      // = (0.f,1.f)  // Offset font rendering by xx pixels
	    get DisplayOffset() { return this.native.DisplayOffset; }
	    // ImVector<ImFontGlyph>       Glyphs;             //              // All glyphs.
	    get Glyphs() {
	        const glyphs = new ImVector();
	        this.native.IterateGlyphs((glyph) => {
	            glyphs.push(new ImFontGlyph(glyph)); // TODO: wrap native
	        });
	        return glyphs;
	    }
	    // ImVector<float>             IndexAdvanceX;      //              // Sparse. Glyphs->AdvanceX in a directly indexable way (more cache-friendly, for CalcTextSize functions which are often bottleneck in large UI).
	    // get IndexAdvanceX(): any { return this.native.IndexAdvanceX; }
	    // ImVector<unsigned short>    IndexLookup;        //              // Sparse. Index glyphs by Unicode code-point.
	    // get IndexLookup(): any { return this.native.IndexLookup; }
	    // const ImFontGlyph*          FallbackGlyph;      // == FindGlyph(FontFallbackChar)
	    get FallbackGlyph() {
	        const glyph = this.native.FallbackGlyph;
	        return glyph && new ImFontGlyph(glyph);
	    }
	    set FallbackGlyph(value) {
	        this.native.FallbackGlyph = value && value.internal;
	    }
	    // float                       FallbackAdvanceX;   // == FallbackGlyph->AdvanceX
	    get FallbackAdvanceX() { return this.native.FallbackAdvanceX; }
	    // ImWchar                     FallbackChar;       // = '?'        // Replacement glyph if one isn't found. Only set via SetFallbackChar()
	    get FallbackChar() { return this.native.FallbackChar; }
	    // Members: Cold ~18/26 bytes
	    // short                       ConfigDataCount;    // ~ 1          // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.
	    get ConfigDataCount() { return this.ConfigData.length; }
	    // ImFontConfig*               ConfigData;         //              // Pointer within ContainerAtlas->ConfigData
	    get ConfigData() {
	        const cfg_data = [];
	        this.native.IterateConfigData((cfg) => {
	            cfg_data.push(new ImFontConfig(cfg));
	        });
	        return cfg_data;
	    }
	    // ImFontAtlas*                ContainerAtlas;     //              // What we has been loaded into
	    get ContainerAtlas() { return null; }
	    // float                       Ascent, Descent;    //              // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]
	    get Ascent() { return this.native.Ascent; }
	    get Descent() { return this.native.Descent; }
	    // int                         MetricsTotalSurface;//              // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)
	    get MetricsTotalSurface() { return this.native.MetricsTotalSurface; }
	    // Methods
	    // IMGUI_API ImFont();
	    // IMGUI_API ~ImFont();
	    // IMGUI_API void              ClearOutputData();
	    ClearOutputData() { return this.native.ClearOutputData(); }
	    // IMGUI_API void              BuildLookupTable();
	    BuildLookupTable() { return this.native.BuildLookupTable(); }
	    // IMGUI_API const ImFontGlyph*FindGlyph(ImWchar c) const;
	    FindGlyph(c) {
	        const glyph = this.native.FindGlyph(c);
	        return glyph && new ImFontGlyph(glyph);
	    }
	    // IMGUI_API const ImFontGlyph*FindGlyphNoFallback(ImWchar c) const;
	    FindGlyphNoFallback(c) {
	        const glyph = this.native.FindGlyphNoFallback(c);
	        return glyph && new ImFontGlyph(glyph);
	    }
	    // IMGUI_API void              SetFallbackChar(ImWchar c);
	    SetFallbackChar(c) { return this.native.SetFallbackChar(c); }
	    // float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdvanceX.Size) ? IndexAdvanceX[(int)c] : FallbackAdvanceX; }
	    GetCharAdvance(c) { return this.native.GetCharAdvance(c); }
	    // bool                        IsLoaded() const                    { return ContainerAtlas != NULL; }
	    IsLoaded() { return this.native.IsLoaded(); }
	    // const char*                 GetDebugName() const                { return ConfigData ? ConfigData->Name : "<unknown>"; }
	    GetDebugName() { return this.native.GetDebugName(); }
	    // 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.
	    // 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable.
	    // IMGUI_API ImVec2            CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end = NULL, const char** remaining = NULL) const; // utf8
	    CalcTextSizeA(size, max_width, wrap_width, text_begin, text_end = null, remaining = null) {
	        return this.native.CalcTextSizeA(size, max_width, wrap_width, text_end !== null ? text_begin.substring(0, text_end) : text_begin, remaining, new ImVec2());
	    }
	    // IMGUI_API const char*       CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const;
	    CalcWordWrapPositionA(scale, text, text_end = null, wrap_width) {
	        return this.native.CalcWordWrapPositionA(scale, text_end !== null ? text.substring(0, text_end) : text, wrap_width);
	    }
	    // IMGUI_API void              RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, unsigned short c) const;
	    RenderChar(draw_list, size, pos, col, c) {
	        this.native.RenderChar(draw_list.native, size, pos, col, c);
	    }
	    // IMGUI_API void              RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width = 0.0f, bool cpu_fine_clip = false) const;
	    RenderText(draw_list, size, pos, col, clip_rect, text_begin, text_end = null, wrap_width = 0.0, cpu_fine_clip = false) { }
	}
	// This is where your app communicate with Dear ImGui. Access via ImGui::GetIO().
	// Read 'Programmer guide' section in .cpp file for general usage.
	class ImGuiIO {
	    constructor(native) {
	        this.native = native;
	        // int           KeyMap[ImGuiKey_COUNT];   // <unset>              // Map of indices into the KeysDown[512] entries array
	        this.KeyMap = new Proxy([], {
	            get: (target, key) => {
	                if (key === "length") {
	                    return ImGuiKey.COUNT;
	                }
	                return this.native._getAt_KeyMap(Number(key));
	            },
	            set: (target, key, value) => {
	                return this.native._setAt_KeyMap(Number(key), value);
	            },
	        });
	        // bool        MouseDown[5];               // Mouse buttons: left, right, middle + extras. ImGui itself mostly only uses left button (BeginPopupContext** are using right button). Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.
	        this.MouseDown = new Proxy([], {
	            get: (target, key) => {
	                if (key === "length") {
	                    return 5;
	                }
	                return this.native._getAt_MouseDown(Number(key));
	            },
	            set: (target, key, value) => {
	                return this.native._setAt_MouseDown(Number(key), value);
	            },
	        });
	        // bool        KeysDown[512];              // Keyboard keys that are pressed (in whatever storage order you naturally have access to keyboard data)
	        this.KeysDown = new Proxy([], {
	            get: (target, key) => {
	                if (key === "length") {
	                    return 512;
	                }
	                return this.native._getAt_KeysDown(Number(key));
	            },
	            set: (target, key, value) => {
	                return this.native._setAt_KeysDown(Number(key), value);
	            },
	        });
	        // float       NavInputs[ImGuiNavInput_COUNT]; // Gamepad inputs (keyboard keys will be auto-mapped and be written here by ImGui::NewFrame)
	        this.NavInputs = new Proxy([], {
	            get: (target, key) => {
	                if (key === "length") {
	                    return ImGuiNavInput.COUNT;
	                }
	                return this.native._getAt_NavInputs(Number(key));
	            },
	            set: (target, key, value) => {
	                return this.native._setAt_NavInputs(Number(key), value);
	            },
	        });
	        //------------------------------------------------------------------
	        // [Internal] ImGui will maintain those fields. Forward compatibility not guaranteed!
	        //------------------------------------------------------------------
	        // ImVec2      MousePosPrev;               // Previous mouse position temporary storage (nb: not for public use, set to MousePos in NewFrame())
	        // ImVec2      MouseClickedPos[5];         // Position at time of clicking
	        this.MouseClickedPos = new Proxy([], {
	            get: (target, key) => {
	                if (key === "length") {
	                    return 5;
	                }
	                return this.native._getAt_MouseClickedPos(Number(key));
	            },
	        });
	        // float       MouseClickedTime[5];        // Time of last click (used to figure out double-click)
	        // bool        MouseClicked[5];            // Mouse button went from !Down to Down
	        // bool        MouseDoubleClicked[5];      // Has mouse button been double-clicked?
	        // bool        MouseReleased[5];           // Mouse button went from Down to !Down
	        // bool        MouseDownOwned[5];          // Track if button was clicked inside a window. We don't request mouse capture from the application if click started outside ImGui bounds.
	        // float       MouseDownDuration[5];       // Duration the mouse button has been down (0.0f == just clicked)
	        this.MouseDownDuration = new Proxy([], {
	            get: (target, key) => {
	                if (key === "length") {
	                    return 5;
	                }
	                return this.native._getAt_MouseDownDuration(Number(key));
	            },
	        });
	        // float       MouseDownDurationPrev[5];   // Previous time the mouse button has been down
	        // ImVec2      MouseDragMaxDistanceAbs[5]; // Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point
	        // float       MouseDragMaxDistanceSqr[5]; // Squared maximum distance of how much mouse has traveled from the clicking point
	        // float       KeysDownDuration[512];      // Duration the keyboard key has been down (0.0f == just pressed)
	        this.KeysDownDuration = new Proxy([], {
	            get: (target, key) => {
	                if (key === "length") {
	                    return 512;
	                }
	                return this.native._getAt_KeysDownDuration(Number(key));
	            },
	        });
	        // float       KeysDownDurationPrev[512];  // Previous duration the key has been down
	        // float       NavInputsDownDuration[ImGuiNavInput_COUNT];
	        this.NavInputsDownDuration = new Proxy([], {
	            get: (target, key) => {
	                if (key === "length") {
	                    return ImGuiNavInput.COUNT;
	                }
	                return this.native._getAt_NavInputsDownDuration(Number(key));
	            },
	        });
	    }
	    //------------------------------------------------------------------
	    // Settings (fill once)                 // Default value:
	    //------------------------------------------------------------------
	    // ImGuiConfigFlags   ConfigFlags;         // = 0                  // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.
	    get ConfigFlags() { return this.native.ConfigFlags; }
	    set ConfigFlags(value) { this.native.ConfigFlags = value; }
	    // ImGuiBackendFlags  BackendFlags;        // = 0                  // Set ImGuiBackendFlags_ enum. Set by imgui_impl_xxx files or custom back-end to communicate features supported by the back-end.
	    get BackendFlags() { return this.native.BackendFlags; }
	    set BackendFlags(value) { this.native.BackendFlags = value; }
	    // ImVec2        DisplaySize;              // <unset>              // Display size, in pixels. For clamping windows positions.
	    get DisplaySize() { return this.native.DisplaySize; }
	    // float         DeltaTime;                // = 1.0f/60.0f         // Time elapsed since last frame, in seconds.
	    get DeltaTime() { return this.native.DeltaTime; }
	    set DeltaTime(value) { this.native.DeltaTime = value; }
	    // float         IniSavingRate;            // = 5.0f               // Maximum time between saving positions/sizes to .ini file, in seconds.
	    get IniSavingRate() { return this.native.IniSavingRate; }
	    set IniSavingRate(value) { this.native.IniSavingRate = value; }
	    // const char*   IniFilename;              // = "imgui.ini"        // Path to .ini file. NULL to disable .ini saving.
	    get IniFilename() { return this.native.IniFilename; }
	    set IniFilename(value) { this.native.IniFilename = value; }
	    // const char*   LogFilename;              // = "imgui_log.txt"    // Path to .log file (default parameter to ImGui::LogToFile when no file is specified).
	    get LogFilename() { return this.native.LogFilename; }
	    set LogFilename(value) { this.native.LogFilename = value; }
	    // float         MouseDoubleClickTime;     // = 0.30f              // Time for a double-click, in seconds.
	    get MouseDoubleClickTime() { return this.native.MouseDoubleClickTime; }
	    set MouseDoubleClickTime(value) { this.native.MouseDoubleClickTime = value; }
	    // float         MouseDoubleClickMaxDist;  // = 6.0f               // Distance threshold to stay in to validate a double-click, in pixels.
	    get MouseDoubleClickMaxDist() { return this.native.MouseDoubleClickMaxDist; }
	    set MouseDoubleClickMaxDist(value) { this.native.MouseDoubleClickMaxDist = value; }
	    // float         MouseDragThreshold;       // = 6.0f               // Distance threshold before considering we are dragging
	    get MouseDragThreshold() { return this.native.MouseDragThreshold; }
	    set MouseDragThreshold(value) { this.native.MouseDragThreshold = value; }
	    // float         KeyRepeatDelay;           // = 0.250f             // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).
	    get KeyRepeatDelay() { return this.native.KeyRepeatDelay; }
	    set KeyRepeatDelay(value) { this.native.KeyRepeatDelay = value; }
	    // float         KeyRepeatRate;            // = 0.050f             // When holding a key/button, rate at which it repeats, in seconds.
	    get KeyRepeatRate() { return this.native.KeyRepeatRate; }
	    set KeyRepeatRate(value) { this.native.KeyRepeatRate = value; }
	    // void*         UserData;                 // = NULL               // Store your own data for retrieval by callbacks.
	    get UserData() { return this.native.UserData; }
	    set UserData(value) { this.native.UserData = value; }
	    // ImFontAtlas*  Fonts;                    // <auto>               // Load and assemble one or more fonts into a single tightly packed texture. Output to Fonts array.
	    get Fonts() { return new ImFontAtlas(this.native.Fonts); }
	    // float         FontGlobalScale;          // = 1.0f               // Global scale all fonts
	    get FontGlobalScale() { return this.native.FontGlobalScale; }
	    set FontGlobalScale(value) { this.native.FontGlobalScale = value; }
	    // bool          FontAllowUserScaling;     // = false              // Allow user scaling text of individual window with CTRL+Wheel.
	    get FontAllowUserScaling() { return this.native.FontAllowUserScaling; }
	    set FontAllowUserScaling(value) { this.native.FontAllowUserScaling = value; }
	    // ImFont*       FontDefault;              // = NULL               // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].
	    get FontDefault() {
	        const font = this.native.FontDefault;
	        return (font === null) ? null : new ImFont(font);
	    }
	    set FontDefault(value) {
	        this.native.FontDefault = value && value.native;
	    }
	    // ImVec2        DisplayFramebufferScale;  // = (1.0f,1.0f)        // For retina display or other situations where window coordinates are different from framebuffer coordinates. User storage only, presently not used by ImGui.
	    get DisplayFramebufferScale() { return this.native.DisplayFramebufferScale; }
	    // Miscellaneous configuration options
	    // bool          OptMacOSXBehaviors;       // = defined(__APPLE__) // OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl
	    get ConfigMacOSXBehaviors() { return this.native.ConfigMacOSXBehaviors; }
	    set ConfigMacOSXBehaviors(value) { this.native.ConfigMacOSXBehaviors = value; }
	    // bool          ConfigInputTextCursorBlink;   // = true               // Enable blinking cursor, for users who consider it annoying.
	    get ConfigInputTextCursorBlink() { return this.native.ConfigInputTextCursorBlink; }
	    set ConfigInputTextCursorBlink(value) { this.native.ConfigInputTextCursorBlink = value; }
	    // bool          ConfigWindowsResizeFromEdges; // = false          // [BETA] Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be the ImGuiWindowFlags_ResizeFromAnySide flag)
	    get ConfigWindowsResizeFromEdges() { return this.native.ConfigWindowsResizeFromEdges; }
	    set ConfigWindowsResizeFromEdges(value) { this.native.ConfigWindowsResizeFromEdges = value; }
	    // bool        ConfigWindowsMoveFromTitleBarOnly;// = false        // [BETA] Set to true to only allow moving windows when clicked+dragged from the title bar. Windows without a title bar are not affected.
	    get ConfigWindowsMoveFromTitleBarOnly() { return this.native.ConfigWindowsMoveFromTitleBarOnly; }
	    set ConfigWindowsMoveFromTitleBarOnly(value) { this.native.ConfigWindowsMoveFromTitleBarOnly = value; }
	    //------------------------------------------------------------------
	    // Settings (User Functions)
	    //------------------------------------------------------------------
	    // Optional: Platform/Renderer back-end name (informational only! will be displayed in About Window) + User data for back-end/wrappers to store their own stuff.
	    // const char* BackendPlatformName;            // = NULL
	    get BackendPlatformName() { return this.native.BackendPlatformName; }
	    set BackendPlatformName(value) { this.native.BackendPlatformName = value; }
	    // const char* BackendRendererName;            // = NULL
	    get BackendRendererName() { return this.native.BackendRendererName; }
	    set BackendRendererName(value) { this.native.BackendRendererName = value; }
	    // void*       BackendPlatformUserData;        // = NULL
	    get BackendPlatformUserData() { return this.native.BackendPlatformUserData; }
	    set BackendPlatformUserData(value) { this.native.BackendPlatformUserData = value; }
	    // void*       BackendRendererUserData;        // = NULL
	    get BackendRendererUserData() { return this.native.BackendRendererUserData; }
	    set BackendRendererUserData(value) { this.native.BackendRendererUserData = value; }
	    // void*       BackendLanguageUserData;        // = NULL
	    get BackendLanguageUserData() { return this.native.BackendLanguageUserData; }
	    set BackendLanguageUserData(value) { this.native.BackendLanguageUserData = value; }
	    // Optional: access OS clipboard
	    // (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)
	    // const char* (*GetClipboardTextFn)(void* user_data);
	    get GetClipboardTextFn() { return this.native.GetClipboardTextFn; }
	    set GetClipboardTextFn(value) { this.native.GetClipboardTextFn = value; }
	    // void        (*SetClipboardTextFn)(void* user_data, const char* text);
	    get SetClipboardTextFn() { return this.native.SetClipboardTextFn; }
	    set SetClipboardTextFn(value) { this.native.SetClipboardTextFn = value; }
	    // void*       ClipboardUserData;
	    get ClipboardUserData() { return this.native.ClipboardUserData; }
	    set ClipboardUserData(value) { this.native.ClipboardUserData = value; }
	    // Optional: override memory allocations. MemFreeFn() may be called with a NULL pointer.
	    // (default to posix malloc/free)
	    // void*       (*MemAllocFn)(size_t sz);
	    // void        (*MemFreeFn)(void* ptr);
	    // Optional: notify OS Input Method Editor of the screen position of your cursor for text input position (e.g. when using Japanese/Chinese IME in Windows)
	    // (default to use native imm32 api on Windows)
	    // void        (*ImeSetInputScreenPosFn)(int x, int y);
	    // void*       ImeWindowHandle;            // (Windows) Set this to your HWND to get automatic IME cursor positioning.
	    //------------------------------------------------------------------
	    // Input - Fill before calling NewFrame()
	    //------------------------------------------------------------------
	    // ImVec2      MousePos;                   // Mouse position, in pixels. Set to ImVec2(-FLT_MAX,-FLT_MAX) if mouse is unavailable (on another screen, etc.)
	    get MousePos() { return this.native.MousePos; }
	    // float       MouseWheel;                 // Mouse wheel: 1 unit scrolls about 5 lines text.
	    get MouseWheel() { return this.native.MouseWheel; }
	    set MouseWheel(value) { this.native.MouseWheel = value; }
	    // float       MouseWheelH;                    // Mouse wheel (Horizontal). Most users don't have a mouse with an horizontal wheel, may not be filled by all back-ends.
	    get MouseWheelH() { return this.native.MouseWheelH; }
	    set MouseWheelH(value) { this.native.MouseWheelH = value; }
	    // bool        MouseDrawCursor;            // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor).
	    get MouseDrawCursor() { return this.native.MouseDrawCursor; }
	    set MouseDrawCursor(value) { this.native.MouseDrawCursor = value; }
	    // bool        KeyCtrl;                    // Keyboard modifier pressed: Control
	    get KeyCtrl() { return this.native.KeyCtrl; }
	    set KeyCtrl(value) { this.native.KeyCtrl = value; }
	    // bool        KeyShift;                   // Keyboard modifier pressed: Shift
	    get KeyShift() { return this.native.KeyShift; }
	    set KeyShift(value) { this.native.KeyShift = value; }
	    // bool        KeyAlt;                     // Keyboard modifier pressed: Alt
	    get KeyAlt() { return this.native.KeyAlt; }
	    set KeyAlt(value) { this.native.KeyAlt = value; }
	    // bool        KeySuper;                   // Keyboard modifier pressed: Cmd/Super/Windows
	    get KeySuper() { return this.native.KeySuper; }
	    set KeySuper(value) { this.native.KeySuper = value; }
	    // Functions
	    // IMGUI_API void AddInputCharacter(ImWchar c);                        // Add new character into InputCharacters[]
	    AddInputCharacter(c) { this.native.AddInputCharacter(c); }
	    // IMGUI_API void AddInputCharactersUTF8(const char* utf8_chars);      // Add new characters into InputCharacters[] from an UTF-8 string
	    AddInputCharactersUTF8(utf8_chars) { this.native.AddInputCharactersUTF8(utf8_chars); }
	    // inline void    ClearInputCharacters() { InputCharacters[0] = 0; }   // Clear the text input buffer manually
	    ClearInputCharacters() { this.native.ClearInputCharacters(); }
	    //------------------------------------------------------------------
	    // Output - Retrieve after calling NewFrame()
	    //------------------------------------------------------------------
	    // bool        WantCaptureMouse;           // When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application. This is set by ImGui when it wants to use your mouse (e.g. unclicked mouse is hovering a window, or a widget is active).
	    get WantCaptureMouse() { return this.native.WantCaptureMouse; }
	    set WantCaptureMouse(value) { this.native.WantCaptureMouse = value; }
	    // bool        WantCaptureKeyboard;        // When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application. This is set by ImGui when it wants to use your keyboard inputs.
	    get WantCaptureKeyboard() { return this.native.WantCaptureKeyboard; }
	    set WantCaptureKeyboard(value) { this.native.WantCaptureKeyboard = value; }
	    // bool        WantTextInput;              // Mobile/console: when io.WantTextInput is true, you may display an on-screen keyboard. This is set by ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).
	    get WantTextInput() { return this.native.WantTextInput; }
	    set WantTextInput(value) { this.native.WantTextInput = value; }
	    // bool        WantSetMousePos;              // [BETA-NAV] MousePos has been altered, back-end should reposition mouse on next frame. Set only when 'NavMovesMouse=true'.
	    get WantSetMousePos() { return this.native.WantSetMousePos; }
	    set WantSetMousePos(value) { this.native.WantSetMousePos = value; }
	    // bool        WantSaveIniSettings;        // When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. IMPORTANT: You need to clear io.WantSaveIniSettings yourself.
	    get WantSaveIniSettings() { return this.native.WantSaveIniSettings; }
	    set WantSaveIniSettings(value) { this.native.WantSaveIniSettings = value; }
	    // bool        NavActive;                  // Directional navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.
	    get NavActive() { return this.native.NavActive; }
	    set NavActive(value) { this.native.NavActive = value; }
	    // bool        NavVisible;                 // Directional navigation is visible and allowed (will handle ImGuiKey_NavXXX events).
	    get NavVisible() { return this.native.NavVisible; }
	    set NavVisible(value) { this.native.NavVisible = value; }
	    // float       Framerate;                  // Application framerate estimation, in frame per second. Solely for convenience. Rolling average estimation based on IO.DeltaTime over 120 frames
	    get Framerate() { return this.native.Framerate; }
	    // int         MetricsRenderVertices;      // Vertices output during last call to Render()
	    get MetricsRenderVertices() { return this.native.MetricsRenderVertices; }
	    // int         MetricsRenderIndices;       // Indices output during last call to Render() = number of triangles * 3
	    get MetricsRenderIndices() { return this.native.MetricsRenderIndices; }
	    // int         MetricsRenderWindows;       // Number of visible windows
	    get MetricsRenderWindows() { return this.native.MetricsRenderWindows; }
	    // int         MetricsActiveWindows;       // Number of visible root windows (exclude child windows)
	    get MetricsActiveWindows() { return this.native.MetricsActiveWindows; }
	    // int         MetricsActiveAllocations;   // Number of active allocations, updated by MemAlloc/MemFree based on current context. May be off if you have multiple imgui contexts.
	    get MetricsActiveAllocations() { return this.native.MetricsActiveAllocations; }
	    // ImVec2      MouseDelta;                 // Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta.
	    get MouseDelta() { return this.native.MouseDelta; }
	}
	// Context creation and access, if you want to use multiple context, share context between modules (e.g. DLL).
	// All contexts share a same ImFontAtlas by default. If you want different font atlas, you can new() them and overwrite the GetIO().Fonts variable of an ImGui context.
	// All those functions are not reliant on the current context.
	class ImGuiContext {
	    constructor(native) {
	        this.native = native;
	        this.textures = [];
	    }
	    static getTexture(index) {
	        if (ImGuiContext.current_ctx === null) {
	            throw new Error();
	        }
	        return ImGuiContext.current_ctx._getTexture(index);
	    }
	    static setTexture(texture) {
	        if (ImGuiContext.current_ctx === null) {
	            throw new Error();
	        }
	        return ImGuiContext.current_ctx._setTexture(texture);
	    }
	    _getTexture(index) {
	        return this.textures[index] || null;
	    }
	    _setTexture(texture) {
	        let index = this.textures.indexOf(texture);
	        if (index === -1) {
	            for (let i = 0; i < this.textures.length; ++i) {
	                if (this.textures[i] === null) {
	                    this.textures[i] = texture;
	                    return i;
	                }
	            }
	            index = this.textures.length;
	            this.textures.push(texture);
	        }
	        return index;
	    }
	}
	ImGuiContext.current_ctx = null;
	// Main
	// IMGUI_API ImGuiIO&      GetIO();
	function GetIO() { return new ImGuiIO(bind.GetIO()); }
	// IMGUI_API ImDrawData*   GetDrawData();                              // same value as passed to your io.RenderDrawListsFn() function. valid after Render() and until the next call to NewFrame()
	function GetDrawData() {
	    const draw_data = bind.GetDrawData();
	    return (draw_data === null) ? null : new ImDrawData(draw_data);
	}
	// IMGUI_API ImGuiMouseCursor GetMouseCursor();                                                // get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you
	function GetMouseCursor() { return bind.GetMouseCursor(); }
	// IMGUI_API void          LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size=0); // call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.
	function LoadIniSettingsFromMemory(ini_data, ini_size = 0) { bind.LoadIniSettingsFromMemory(ini_data); }
	// IMGUI_API const char*   SaveIniSettingsToMemory(size_t* out_ini_size = NULL);               // return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.
	function SaveIniSettingsToMemory(out_ini_size = null) { return bind.SaveIniSettingsToMemory(); }

	let clipboard_text = "";
	let canvas = null;
	exports.gl = null;
	let g_ShaderHandle = null;
	let g_VertHandle = null;
	let g_FragHandle = null;
	let g_AttribLocationTex = null;
	let g_AttribLocationProjMtx = null;
	let g_AttribLocationPosition = -1;
	let g_AttribLocationUV = -1;
	let g_AttribLocationColor = -1;
	let g_VboHandle = null;
	let g_ElementsHandle = null;
	let g_FontTexture = null;
	exports.ctx = null;
	let prev_time = 0;
	function document_on_copy(event) {
	    if (event.clipboardData) {
	        event.clipboardData.setData("text/plain", clipboard_text);
	    }
	    // console.log(`${event.type}: "${clipboard_text}"`);
	    event.preventDefault();
	}
	function document_on_cut(event) {
	    if (event.clipboardData) {
	        event.clipboardData.setData("text/plain", clipboard_text);
	    }
	    // console.log(`${event.type}: "${clipboard_text}"`);
	    event.preventDefault();
	}
	function document_on_paste(event) {
	    if (event.clipboardData) {
	        clipboard_text = event.clipboardData.getData("text/plain");
	    }
	    // console.log(`${event.type}: "${clipboard_text}"`);
	    event.preventDefault();
	}
	function window_on_resize() {
	    if (canvas !== null) {
	        const devicePixelRatio = window.devicePixelRatio || 1;
	        canvas.width = Math.floor(canvas.scrollWidth * devicePixelRatio);
	        canvas.height = Math.floor(canvas.scrollHeight * devicePixelRatio);
	    }
	}
	function window_on_gamepadconnected(event /* GamepadEvent */) {
	    console.log("Gamepad connected at index %d: %s. %d buttons, %d axes.", event.gamepad.index, event.gamepad.id, event.gamepad.buttons.length, event.gamepad.axes.length);
	}
	function window_on_gamepaddisconnected(event /* GamepadEvent */) {
	    console.log("Gamepad disconnected at index %d: %s.", event.gamepad.index, event.gamepad.id);
	}
	function canvas_on_blur(event) {
	    const io = GetIO();
	    io.KeyCtrl = false;
	    io.KeyShift = false;
	    io.KeyAlt = false;
	    io.KeySuper = false;
	    for (let i = 0; i < io.KeysDown.length; ++i) {
	        io.KeysDown[i] = false;
	    }
	    for (let i = 0; i < io.MouseDown.length; ++i) {
	        io.MouseDown[i] = false;
	    }
	}
	function canvas_on_keydown(event) {
	    // console.log(event.type, event.key, event.keyCode);
	    const io = GetIO();
	    io.KeyCtrl = event.ctrlKey;
	    io.KeyShift = event.shiftKey;
	    io.KeyAlt = event.altKey;
	    io.KeySuper = event.metaKey;
	    IM_ASSERT(event.keyCode >= 0 && event.keyCode < IM_ARRAYSIZE(io.KeysDown));
	    io.KeysDown[event.keyCode] = true;
	    // forward to the keypress event
	    if ( /*io.WantCaptureKeyboard ||*/event.key === "Tab") {
	        event.preventDefault();
	    }
	}
	function canvas_on_keyup(event) {
	    // console.log(event.type, event.key, event.keyCode);
	    const io = GetIO();
	    io.KeyCtrl = event.ctrlKey;
	    io.KeyShift = event.shiftKey;
	    io.KeyAlt = event.altKey;
	    io.KeySuper = event.metaKey;
	    IM_ASSERT(event.keyCode >= 0 && event.keyCode < IM_ARRAYSIZE(io.KeysDown));
	    io.KeysDown[event.keyCode] = false;
	    if (io.WantCaptureKeyboard) {
	        event.preventDefault();
	    }
	}
	function canvas_on_keypress(event) {
	    // console.log(event.type, event.key, event.keyCode);
	    const io = GetIO();
	    io.AddInputCharacter(event.charCode);
	    if (io.WantCaptureKeyboard) {
	        event.preventDefault();
	    }
	}
	function canvas_on_pointermove(event) {
	    const io = GetIO();
	    io.MousePos.x = event.offsetX;
	    io.MousePos.y = event.offsetY;
	    if (io.WantCaptureMouse) {
	        event.preventDefault();
	    }
	}
	// MouseEvent.button
	// A number representing a given button:
	// 0: Main button pressed, usually the left button or the un-initialized state
	// 1: Auxiliary button pressed, usually the wheel button or the middle button (if present)
	// 2: Secondary button pressed, usually the right button
	// 3: Fourth button, typically the Browser Back button
	// 4: Fifth button, typically the Browser Forward button
	const mouse_button_map = [0, 2, 1, 3, 4];
	function canvas_on_pointerdown(event) {
	    const io = GetIO();
	    io.MousePos.x = event.offsetX;
	    io.MousePos.y = event.offsetY;
	    io.MouseDown[mouse_button_map[event.button]] = true;
	    // if (io.WantCaptureMouse) {
	    //     event.preventDefault();
	    // }
	}
	function canvas_on_contextmenu(event) {
	    const io = GetIO();
	    if (io.WantCaptureMouse) {
	        event.preventDefault();
	    }
	}
	function canvas_on_pointerup(event) {
	    const io = GetIO();
	    io.MouseDown[mouse_button_map[event.button]] = false;
	    if (io.WantCaptureMouse) {
	        event.preventDefault();
	    }
	}
	function canvas_on_wheel(event) {
	    const io = GetIO();
	    let scale = 1.0;
	    switch (event.deltaMode) {
	        case event.DOM_DELTA_PIXEL:
	            scale = 0.01;
	            break;
	        case event.DOM_DELTA_LINE:
	            scale = 0.2;
	            break;
	        case event.DOM_DELTA_PAGE:
	            scale = 1.0;
	            break;
	    }
	    io.MouseWheelH = event.deltaX * scale;
	    io.MouseWheel = -event.deltaY * scale; // Mouse wheel: 1 unit scrolls about 5 lines text.
	    if (io.WantCaptureMouse) {
	        event.preventDefault();
	    }
	}
	function Init(value) {
	    const io = GetIO();
	    if (typeof (window) !== "undefined") {
	        io.BackendPlatformName = "imgui_impl_html5";
	        LoadIniSettingsFromMemory(window.localStorage.getItem("imgui.ini") || "");
	    }
	    if (typeof (navigator) !== "undefined") {
	        io.ConfigMacOSXBehaviors = navigator.platform.match(/Mac/) !== null;
	    }
	    if (typeof (document) !== "undefined") {
	        document.body.addEventListener("copy", document_on_copy);
	        document.body.addEventListener("cut", document_on_cut);
	        document.body.addEventListener("paste", document_on_paste);
	    }
	    io.SetClipboardTextFn = (user_data, text) => {
	        clipboard_text = text;
	        // console.log(`set clipboard_text: "${clipboard_text}"`);
	        if (typeof navigator !== "undefined" && typeof navigator.clipboard !== "undefined") {
	            // console.log(`clipboard.writeText: "${clipboard_text}"`);
	            navigator.clipboard.writeText(clipboard_text).then(() => {
	                // console.log(`clipboard.writeText: "${clipboard_text}" done.`);
	            });
	        }
	    };
	    io.GetClipboardTextFn = (user_data) => {
	        // if (typeof navigator !== "undefined" && typeof (navigator as any).clipboard !== "undefined") {
	        //     console.log(`clipboard.readText: "${clipboard_text}"`);
	        //     (navigator as any).clipboard.readText().then((text: string): void => {
	        //         clipboard_text = text;
	        //         console.log(`clipboard.readText: "${clipboard_text}" done.`);
	        //     });
	        // }
	        // console.log(`get clipboard_text: "${clipboard_text}"`);
	        return clipboard_text;
	    };
	    io.ClipboardUserData = null;
	    if (typeof (window) !== "undefined") {
	        window.addEventListener("resize", window_on_resize);
	        window.addEventListener("gamepadconnected", window_on_gamepadconnected);
	        window.addEventListener("gamepaddisconnected", window_on_gamepaddisconnected);
	    }
	    if (typeof (window) !== "undefined") {
	        if (value instanceof (HTMLCanvasElement)) {
	            value = value.getContext("webgl", { alpha: false }) || value.getContext("2d");
	        }
	        if (value instanceof (WebGLRenderingContext)) {
	            io.BackendRendererName = "imgui_impl_webgl";
	            canvas = value.canvas;
	            exports.gl = value;
	        }
	        if (value instanceof (CanvasRenderingContext2D)) {
	            io.BackendRendererName = "imgui_impl_ctx2d";
	            canvas = value.canvas;
	            exports.ctx = value;
	        }
	    }
	    if (canvas !== null) {
	        window_on_resize();
	        canvas.style.touchAction = "none"; // Disable browser handling of all panning and zooming gestures.
	        canvas.addEventListener("blur", canvas_on_blur);
	        canvas.addEventListener("keydown", canvas_on_keydown);
	        canvas.addEventListener("keyup", canvas_on_keyup);
	        canvas.addEventListener("keypress", canvas_on_keypress);
	        canvas.addEventListener("pointermove", canvas_on_pointermove);
	        canvas.addEventListener("pointerdown", canvas_on_pointerdown);
	        canvas.addEventListener("contextmenu", canvas_on_contextmenu);
	        canvas.addEventListener("pointerup", canvas_on_pointerup);
	        canvas.addEventListener("wheel", canvas_on_wheel);
	    }
	    // Setup back-end capabilities flags
	    io.BackendFlags |= ImGuiBackendFlags.HasMouseCursors; // We can honor GetMouseCursor() values (optional)
	    // Keyboard mapping. ImGui will use those indices to peek into the io.KeyDown[] array.
	    io.KeyMap[ImGuiKey.Tab] = 9;
	    io.KeyMap[ImGuiKey.LeftArrow] = 37;
	    io.KeyMap[ImGuiKey.RightArrow] = 39;
	    io.KeyMap[ImGuiKey.UpArrow] = 38;
	    io.KeyMap[ImGuiKey.DownArrow] = 40;
	    io.KeyMap[ImGuiKey.PageUp] = 33;
	    io.KeyMap[ImGuiKey.PageDown] = 34;
	    io.KeyMap[ImGuiKey.Home] = 36;
	    io.KeyMap[ImGuiKey.End] = 35;
	    io.KeyMap[ImGuiKey.Insert] = 45;
	    io.KeyMap[ImGuiKey.Delete] = 46;
	    io.KeyMap[ImGuiKey.Backspace] = 8;
	    io.KeyMap[ImGuiKey.Space] = 32;
	    io.KeyMap[ImGuiKey.Enter] = 13;
	    io.KeyMap[ImGuiKey.Escape] = 27;
	    io.KeyMap[ImGuiKey.A] = 65;
	    io.KeyMap[ImGuiKey.C] = 67;
	    io.KeyMap[ImGuiKey.V] = 86;
	    io.KeyMap[ImGuiKey.X] = 88;
	    io.KeyMap[ImGuiKey.Y] = 89;
	    io.KeyMap[ImGuiKey.Z] = 90;
	    CreateDeviceObjects();
	}
	function Shutdown() {
	    DestroyDeviceObjects();
	    if (canvas !== null) {
	        canvas.removeEventListener("blur", canvas_on_blur);
	        canvas.removeEventListener("keydown", canvas_on_keydown);
	        canvas.removeEventListener("keyup", canvas_on_keyup);
	        canvas.removeEventListener("keypress", canvas_on_keypress);
	        canvas.removeEventListener("pointermove", canvas_on_pointermove);
	        canvas.removeEventListener("pointerdown", canvas_on_pointerdown);
	        canvas.removeEventListener("contextmenu", canvas_on_contextmenu);
	        canvas.removeEventListener("pointerup", canvas_on_pointerup);
	        canvas.removeEventListener("wheel", canvas_on_wheel);
	    }
	    exports.gl = null;
	    exports.ctx = null;
	    canvas = null;
	    if (typeof (window) !== "undefined") {
	        window.removeEventListener("resize", window_on_resize);
	        window.removeEventListener("gamepadconnected", window_on_gamepadconnected);
	        window.removeEventListener("gamepaddisconnected", window_on_gamepaddisconnected);
	    }
	    if (typeof (document) !== "undefined") {
	        document.body.removeEventListener("copy", document_on_copy);
	        document.body.removeEventListener("cut", document_on_cut);
	        document.body.removeEventListener("paste", document_on_paste);
	    }
	}
	function NewFrame(time) {
	    const io = GetIO();
	    if (io.WantSaveIniSettings) {
	        io.WantSaveIniSettings = false;
	        if (typeof (window) !== "undefined") {
	            window.localStorage.setItem("imgui.ini", SaveIniSettingsToMemory());
	        }
	    }
	    const w = canvas && canvas.scrollWidth || 640;
	    const h = canvas && canvas.scrollHeight || 480;
	    const display_w = exports.gl && exports.gl.drawingBufferWidth || w;
	    const display_h = exports.gl && exports.gl.drawingBufferHeight || h;
	    io.DisplaySize.x = w;
	    io.DisplaySize.y = h;
	    io.DisplayFramebufferScale.x = w > 0 ? (display_w / w) : 0;
	    io.DisplayFramebufferScale.y = h > 0 ? (display_h / h) : 0;
	    const dt = time - prev_time;
	    prev_time = time;
	    io.DeltaTime = dt / 1000;
	    if (io.WantSetMousePos) {
	        console.log("TODO: MousePos", io.MousePos.x, io.MousePos.y);
	    }
	    if (typeof (document) !== "undefined") {
	        if (io.MouseDrawCursor) {
	            document.body.style.cursor = "none";
	        }
	        else {
	            switch (GetMouseCursor()) {
	                case ImGuiMouseCursor.None:
	                    document.body.style.cursor = "none";
	                    break;
	                default:
	                case ImGuiMouseCursor.Arrow:
	                    document.body.style.cursor = "default";
	                    break;
	                case ImGuiMouseCursor.TextInput:
	                    document.body.style.cursor = "text";
	                    break; // When hovering over InputText, etc.
	                case ImGuiMouseCursor.ResizeAll:
	                    document.body.style.cursor = "move";
	                    break; // Unused
	                case ImGuiMouseCursor.ResizeNS:
	                    document.body.style.cursor = "ns-resize";
	                    break; // When hovering over an horizontal border
	                case ImGuiMouseCursor.ResizeEW:
	                    document.body.style.cursor = "ew-resize";
	                    break; // When hovering over a vertical border or a column
	                case ImGuiMouseCursor.ResizeNESW:
	                    document.body.style.cursor = "nesw-resize";
	                    break; // When hovering over the bottom-left corner of a window
	                case ImGuiMouseCursor.ResizeNWSE:
	                    document.body.style.cursor = "nwse-resize";
	                    break; // When hovering over the bottom-right corner of a window
	                case ImGuiMouseCursor.Hand:
	                    document.body.style.cursor = "move";
	                    break;
	            }
	        }
	    }
	    // Gamepad navigation mapping [BETA]
	    for (let i = 0; i < io.NavInputs.length; ++i) {
	        io.NavInputs[i] = 0.0;
	    }
	    if (io.ConfigFlags & ImGuiConfigFlags.NavEnableGamepad) {
	        // Update gamepad inputs
	        const gamepads = (typeof (navigator) !== "undefined" && typeof (navigator.getGamepads) === "function") ? navigator.getGamepads() : [];
	        for (let i = 0; i < gamepads.length; ++i) {
	            const gamepad = gamepads[i];
	            if (!gamepad) {
	                continue;
	            }
	            const buttons_count = gamepad.buttons.length;
	            const axes_count = gamepad.axes.length;
	            function MAP_BUTTON(NAV_NO, BUTTON_NO) {
	                if (!gamepad) {
	                    return;
	                }
	                if (buttons_count > BUTTON_NO && gamepad.buttons[BUTTON_NO].pressed)
	                    io.NavInputs[NAV_NO] = 1.0;
	            }
	            function MAP_ANALOG(NAV_NO, AXIS_NO, V0, V1) {
	                if (!gamepad) {
	                    return;
	                }
	                let v = (axes_count > AXIS_NO) ? gamepad.axes[AXIS_NO] : V0;
	                v = (v - V0) / (V1 - V0);
	                if (v > 1.0)
	                    v = 1.0;
	                if (io.NavInputs[NAV_NO] < v)
	                    io.NavInputs[NAV_NO] = v;
	            }
	            // TODO: map input based on vendor and product id
	            // https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id
	            const match = gamepad.id.match(/^([0-9a-f]{4})-([0-9a-f]{4})-.*$/);
	            const match_chrome = gamepad.id.match(/^.*\(.*Vendor: ([0-9a-f]{4}) Product: ([0-9a-f]{4})\).*$/);
	            const vendor = (match && match[1]) || (match_chrome && match_chrome[1]) || "0000";
	            const product = (match && match[2]) || (match_chrome && match_chrome[2]) || "0000";
	            switch (vendor + product) {
	                case "046dc216": // Logitech Logitech Dual Action (Vendor: 046d Product: c216)
	                    MAP_BUTTON(ImGuiNavInput.Activate, 1); // Cross / A
	                    MAP_BUTTON(ImGuiNavInput.Cancel, 2); // Circle / B
	                    MAP_BUTTON(ImGuiNavInput.Menu, 0); // Square / X
	                    MAP_BUTTON(ImGuiNavInput.Input, 3); // Triangle / Y
	                    MAP_ANALOG(ImGuiNavInput.DpadLeft, 4, -0.3, -0.9); // D-Pad Left
	                    MAP_ANALOG(ImGuiNavInput.DpadRight, 4, +0.3, +0.9); // D-Pad Right
	                    MAP_ANALOG(ImGuiNavInput.DpadUp, 5, -0.3, -0.9); // D-Pad Up
	                    MAP_ANALOG(ImGuiNavInput.DpadDown, 5, +0.3, +0.9); // D-Pad Down
	                    MAP_BUTTON(ImGuiNavInput.FocusPrev, 4); // L1 / LB
	                    MAP_BUTTON(ImGuiNavInput.FocusNext, 5); // R1 / RB
	                    MAP_BUTTON(ImGuiNavInput.TweakSlow, 6); // L2 / LT
	                    MAP_BUTTON(ImGuiNavInput.TweakFast, 7); // R2 / RT
	                    MAP_ANALOG(ImGuiNavInput.LStickLeft, 0, -0.3, -0.9);
	                    MAP_ANALOG(ImGuiNavInput.LStickRight, 0, +0.3, +0.9);
	                    MAP_ANALOG(ImGuiNavInput.LStickUp, 1, -0.3, -0.9);
	                    MAP_ANALOG(ImGuiNavInput.LStickDown, 1, +0.3, +0.9);
	                    break;
	                case "046dc21d": // Logitech Gamepad F310 (STANDARD GAMEPAD Vendor: 046d Product: c21d)
	                    MAP_BUTTON(ImGuiNavInput.Activate, 0); // Cross / A
	                    MAP_BUTTON(ImGuiNavInput.Cancel, 1); // Circle / B
	                    MAP_BUTTON(ImGuiNavInput.Menu, 2); // Square / X
	                    MAP_BUTTON(ImGuiNavInput.Input, 3); // Triangle / Y
	                    MAP_BUTTON(ImGuiNavInput.DpadLeft, 14); // D-Pad Left
	                    MAP_BUTTON(ImGuiNavInput.DpadRight, 15); // D-Pad Right
	                    MAP_BUTTON(ImGuiNavInput.DpadUp, 12); // D-Pad Up
	                    MAP_BUTTON(ImGuiNavInput.DpadDown, 13); // D-Pad Down
	                    MAP_BUTTON(ImGuiNavInput.FocusPrev, 4); // L1 / LB
	                    MAP_BUTTON(ImGuiNavInput.FocusNext, 5); // R1 / RB
	                    MAP_ANALOG(ImGuiNavInput.TweakSlow, 6, +0.3, +0.9); // L2 / LT
	                    MAP_ANALOG(ImGuiNavInput.TweakFast, 7, +0.3, +0.9); // R2 / RT
	                    MAP_ANALOG(ImGuiNavInput.LStickLeft, 0, -0.3, -0.9);
	                    MAP_ANALOG(ImGuiNavInput.LStickRight, 0, +0.3, +0.9);
	                    MAP_ANALOG(ImGuiNavInput.LStickUp, 1, -0.3, -0.9);
	                    MAP_ANALOG(ImGuiNavInput.LStickDown, 1, +0.3, +0.9);
	                    break;
	                case "2dc86001": // 8Bitdo SN30 Pro  8Bitdo SN30 Pro (Vendor: 2dc8 Product: 6001)
	                case "2dc86101": // 8Bitdo SN30 Pro (Vendor: 2dc8 Product: 6101)
	                    MAP_BUTTON(ImGuiNavInput.Activate, 1); // Cross / A
	                    MAP_BUTTON(ImGuiNavInput.Cancel, 0); // Circle / B
	                    MAP_BUTTON(ImGuiNavInput.Menu, 4); // Square / X
	                    MAP_BUTTON(ImGuiNavInput.Input, 3); // Triangle / Y
	                    MAP_ANALOG(ImGuiNavInput.DpadLeft, 6, -0.3, -0.9); // D-Pad Left
	                    MAP_ANALOG(ImGuiNavInput.DpadRight, 6, +0.3, +0.9); // D-Pad Right
	                    MAP_ANALOG(ImGuiNavInput.DpadUp, 7, -0.3, -0.9); // D-Pad Up
	                    MAP_ANALOG(ImGuiNavInput.DpadDown, 7, +0.3, +0.9); // D-Pad Down
	                    MAP_BUTTON(ImGuiNavInput.FocusPrev, 6); // L1 / LB
	                    MAP_BUTTON(ImGuiNavInput.FocusNext, 7); // R1 / RB
	                    MAP_BUTTON(ImGuiNavInput.TweakSlow, 8); // L2 / LT
	                    MAP_BUTTON(ImGuiNavInput.TweakFast, 9); // R2 / RT
	                    MAP_ANALOG(ImGuiNavInput.LStickLeft, 0, -0.3, -0.9);
	                    MAP_ANALOG(ImGuiNavInput.LStickRight, 0, +0.3, +0.9);
	                    MAP_ANALOG(ImGuiNavInput.LStickUp, 1, -0.3, -0.9);
	                    MAP_ANALOG(ImGuiNavInput.LStickDown, 1, +0.3, +0.9);
	                    break;
	                default: // standard gamepad: https://w3c.github.io/gamepad/#remapping
	                    MAP_BUTTON(ImGuiNavInput.Activate, 0); // Cross / A
	                    MAP_BUTTON(ImGuiNavInput.Cancel, 1); // Circle / B
	                    MAP_BUTTON(ImGuiNavInput.Menu, 2); // Square / X
	                    MAP_BUTTON(ImGuiNavInput.Input, 3); // Triangle / Y
	                    MAP_BUTTON(ImGuiNavInput.DpadLeft, 14); // D-Pad Left
	                    MAP_BUTTON(ImGuiNavInput.DpadRight, 15); // D-Pad Right
	                    MAP_BUTTON(ImGuiNavInput.DpadUp, 12); // D-Pad Up
	                    MAP_BUTTON(ImGuiNavInput.DpadDown, 13); // D-Pad Down
	                    MAP_BUTTON(ImGuiNavInput.FocusPrev, 4); // L1 / LB
	                    MAP_BUTTON(ImGuiNavInput.FocusNext, 5); // R1 / RB
	                    MAP_BUTTON(ImGuiNavInput.TweakSlow, 6); // L2 / LT
	                    MAP_BUTTON(ImGuiNavInput.TweakFast, 7); // R2 / RT
	                    MAP_ANALOG(ImGuiNavInput.LStickLeft, 0, -0.3, -0.9);
	                    MAP_ANALOG(ImGuiNavInput.LStickRight, 0, +0.3, +0.9);
	                    MAP_ANALOG(ImGuiNavInput.LStickUp, 1, -0.3, -0.9);
	                    MAP_ANALOG(ImGuiNavInput.LStickDown, 1, +0.3, +0.9);
	                    break;
	            }
	        }
	    }
	}
	function RenderDrawData(draw_data = GetDrawData()) {
	    const io = GetIO();
	    if (draw_data === null) {
	        throw new Error();
	    }
	    exports.gl || exports.ctx || console.log(draw_data);
	    // Avoid rendering when minimized, scale coordinates for retina displays (screen coordinates != framebuffer coordinates)
	    const fb_width = io.DisplaySize.x * io.DisplayFramebufferScale.x;
	    const fb_height = io.DisplaySize.y * io.DisplayFramebufferScale.y;
	    if (fb_width === 0 || fb_height === 0) {
	        return;
	    }
	    draw_data.ScaleClipRects(io.DisplayFramebufferScale);
	    // Backup GL state
	    const last_active_texture = exports.gl && exports.gl.getParameter(exports.gl.ACTIVE_TEXTURE) || null;
	    const last_program = exports.gl && exports.gl.getParameter(exports.gl.CURRENT_PROGRAM) || null;
	    const last_texture = exports.gl && exports.gl.getParameter(exports.gl.TEXTURE_BINDING_2D) || null;
	    const last_array_buffer = exports.gl && exports.gl.getParameter(exports.gl.ARRAY_BUFFER_BINDING) || null;
	    const last_element_array_buffer = exports.gl && exports.gl.getParameter(exports.gl.ELEMENT_ARRAY_BUFFER_BINDING) || null;
	    // GLint last_polygon_mode[2]; glGetIntegerv(GL_POLYGON_MODE, last_polygon_mode);
	    const last_viewport = exports.gl && exports.gl.getParameter(exports.gl.VIEWPORT) || null;
	    const last_scissor_box = exports.gl && exports.gl.getParameter(exports.gl.SCISSOR_BOX) || null;
	    const last_blend_src_rgb = exports.gl && exports.gl.getParameter(exports.gl.BLEND_SRC_RGB) || null;
	    const last_blend_dst_rgb = exports.gl && exports.gl.getParameter(exports.gl.BLEND_DST_RGB) || null;
	    const last_blend_src_alpha = exports.gl && exports.gl.getParameter(exports.gl.BLEND_SRC_ALPHA) || null;
	    const last_blend_dst_alpha = exports.gl && exports.gl.getParameter(exports.gl.BLEND_DST_ALPHA) || null;
	    const last_blend_equation_rgb = exports.gl && exports.gl.getParameter(exports.gl.BLEND_EQUATION_RGB) || null;
	    const last_blend_equation_alpha = exports.gl && exports.gl.getParameter(exports.gl.BLEND_EQUATION_ALPHA) || null;
	    const last_enable_blend = exports.gl && exports.gl.getParameter(exports.gl.BLEND) || null;
	    const last_enable_cull_face = exports.gl && exports.gl.getParameter(exports.gl.CULL_FACE) || null;
	    const last_enable_depth_test = exports.gl && exports.gl.getParameter(exports.gl.DEPTH_TEST) || null;
	    const last_enable_scissor_test = exports.gl && exports.gl.getParameter(exports.gl.SCISSOR_TEST) || null;
	    // Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled, polygon fill
	    exports.gl && exports.gl.enable(exports.gl.BLEND);
	    exports.gl && exports.gl.blendEquation(exports.gl.FUNC_ADD);
	    exports.gl && exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);
	    exports.gl && exports.gl.disable(exports.gl.CULL_FACE);
	    exports.gl && exports.gl.disable(exports.gl.DEPTH_TEST);
	    exports.gl && exports.gl.enable(exports.gl.SCISSOR_TEST);
	    // glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	    // Setup viewport, orthographic projection matrix
	    // Our visible imgui space lies from draw_data->DisplayPps (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayMin is typically (0,0) for single viewport apps.
	    exports.gl && exports.gl.viewport(0, 0, fb_width, fb_height);
	    const L = draw_data.DisplayPos.x;
	    const R = draw_data.DisplayPos.x + draw_data.DisplaySize.x;
	    const T = draw_data.DisplayPos.y;
	    const B = draw_data.DisplayPos.y + draw_data.DisplaySize.y;
	    const ortho_projection = new Float32Array([
	        2.0 / (R - L), 0.0, 0.0, 0.0,
	        0.0, 2.0 / (T - B), 0.0, 0.0,
	        0.0, 0.0, -1.0, 0.0,
	        (R + L) / (L - R), (T + B) / (B - T), 0.0, 1.0,
	    ]);
	    exports.gl && exports.gl.useProgram(g_ShaderHandle);
	    exports.gl && exports.gl.uniform1i(g_AttribLocationTex, 0);
	    exports.gl && g_AttribLocationProjMtx && exports.gl.uniformMatrix4fv(g_AttribLocationProjMtx, false, ortho_projection);
	    // Render command lists
	    exports.gl && exports.gl.bindBuffer(exports.gl.ARRAY_BUFFER, g_VboHandle);
	    exports.gl && exports.gl.enableVertexAttribArray(g_AttribLocationPosition);
	    exports.gl && exports.gl.enableVertexAttribArray(g_AttribLocationUV);
	    exports.gl && exports.gl.enableVertexAttribArray(g_AttribLocationColor);
	    exports.gl && exports.gl.vertexAttribPointer(g_AttribLocationPosition, 2, exports.gl.FLOAT, false, ImDrawVertSize, ImDrawVertPosOffset);
	    exports.gl && exports.gl.vertexAttribPointer(g_AttribLocationUV, 2, exports.gl.FLOAT, false, ImDrawVertSize, ImDrawVertUVOffset);
	    exports.gl && exports.gl.vertexAttribPointer(g_AttribLocationColor, 4, exports.gl.UNSIGNED_BYTE, true, ImDrawVertSize, ImDrawVertColOffset);
	    // Draw
	    const pos = draw_data.DisplayPos;
	    const idx_buffer_type = exports.gl && ( exports.gl.UNSIGNED_SHORT) || 0;
	    draw_data.IterateDrawLists((draw_list) => {
	        exports.gl || exports.ctx || console.log(draw_list);
	        exports.gl || exports.ctx || console.log("VtxBuffer.length", draw_list.VtxBuffer.length);
	        exports.gl || exports.ctx || console.log("IdxBuffer.length", draw_list.IdxBuffer.length);
	        let idx_buffer_offset = 0;
	        exports.gl && exports.gl.bindBuffer(exports.gl.ARRAY_BUFFER, g_VboHandle);
	        exports.gl && exports.gl.bufferData(exports.gl.ARRAY_BUFFER, draw_list.VtxBuffer, exports.gl.STREAM_DRAW);
	        exports.gl && exports.gl.bindBuffer(exports.gl.ELEMENT_ARRAY_BUFFER, g_ElementsHandle);
	        exports.gl && exports.gl.bufferData(exports.gl.ELEMENT_ARRAY_BUFFER, draw_list.IdxBuffer, exports.gl.STREAM_DRAW);
	        draw_list.IterateDrawCmds((draw_cmd) => {
	            exports.gl || exports.ctx || console.log(draw_cmd);
	            exports.gl || exports.ctx || console.log("ElemCount", draw_cmd.ElemCount);
	            exports.gl || exports.ctx || console.log("ClipRect", draw_cmd.ClipRect.x, fb_height - draw_cmd.ClipRect.w, draw_cmd.ClipRect.z - draw_cmd.ClipRect.x, draw_cmd.ClipRect.w - draw_cmd.ClipRect.y);
	            exports.gl || exports.ctx || console.log("TextureId", draw_cmd.TextureId);
	            if (!exports.gl && !exports.ctx) {
	                console.log("i: pos.x pos.y uv.x uv.y col");
	                for (let i = 0; i < Math.min(3, draw_cmd.ElemCount); ++i) {
	                    const view = new ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i * ImDrawVertSize);
	                    console.log(`${i}: ${view.pos[0].toFixed(2)} ${view.pos[1].toFixed(2)} ${view.uv[0].toFixed(5)} ${view.uv[1].toFixed(5)} ${("00000000" + view.col[0].toString(16)).substr(-8)}`);
	                }
	            }
	            if (draw_cmd.UserCallback !== null) {
	                // User callback (registered via ImDrawList::AddCallback)
	                draw_cmd.UserCallback(draw_list, draw_cmd);
	            }
	            else {
	                const clip_rect = new ImVec4(draw_cmd.ClipRect.x - pos.x, draw_cmd.ClipRect.y - pos.y, draw_cmd.ClipRect.z - pos.x, draw_cmd.ClipRect.w - pos.y);
	                if (clip_rect.x < fb_width && clip_rect.y < fb_height && clip_rect.z >= 0.0 && clip_rect.w >= 0.0) {
	                    // Apply scissor/clipping rectangle
	                    exports.gl && exports.gl.scissor(clip_rect.x, fb_height - clip_rect.w, clip_rect.z - clip_rect.x, clip_rect.w - clip_rect.y);
	                    // Bind texture, Draw
	                    exports.gl && exports.gl.activeTexture(exports.gl.TEXTURE0);
	                    exports.gl && exports.gl.bindTexture(exports.gl.TEXTURE_2D, draw_cmd.TextureId);
	                    exports.gl && exports.gl.drawElements(exports.gl.TRIANGLES, draw_cmd.ElemCount, idx_buffer_type, idx_buffer_offset);
	                    if (exports.ctx) {
	                        exports.ctx.save();
	                        exports.ctx.beginPath();
	                        exports.ctx.rect(clip_rect.x, clip_rect.y, clip_rect.z - clip_rect.x, clip_rect.w - clip_rect.y);
	                        exports.ctx.clip();
	                        const idx = 
	                            new Uint16Array(draw_list.IdxBuffer.buffer, draw_list.IdxBuffer.byteOffset + idx_buffer_offset);
	                        for (let i = 0; i < draw_cmd.ElemCount; i += 3) {
	                            const i0 = idx[i + 0];
	                            const i1 = idx[i + 1];
	                            const i2 = idx[i + 2];
	                            const v0 = new ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i0 * ImDrawVertSize);
	                            const v1 = new ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i1 * ImDrawVertSize);
	                            const v2 = new ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i2 * ImDrawVertSize);
	                            const i3 = idx[i + 3];
	                            const i4 = idx[i + 4];
	                            const i5 = idx[i + 5];
	                            const v3 = new ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i3 * ImDrawVertSize);
	                            const v4 = new ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i4 * ImDrawVertSize);
	                            const v5 = new ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i5 * ImDrawVertSize);
	                            let quad = true;
	                            let minmin = v0;
	                            let minmax = v0;
	                            let maxmin = v0;
	                            let maxmax = v0;
	                            for (const v of [v1, v2, v3, v4, v5]) {
	                                let found = false;
	                                if (v.pos[0] <= minmin.pos[0] && v.pos[1] <= minmin.pos[1]) {
	                                    minmin = v;
	                                    found = true;
	                                }
	                                if (v.pos[0] <= minmax.pos[0] && v.pos[1] >= minmax.pos[1]) {
	                                    minmax = v;
	                                    found = true;
	                                }
	                                if (v.pos[0] >= maxmin.pos[0] && v.pos[1] <= maxmin.pos[1]) {
	                                    maxmin = v;
	                                    found = true;
	                                }
	                                if (v.pos[0] >= maxmax.pos[0] && v.pos[1] >= maxmax.pos[1]) {
	                                    maxmax = v;
	                                    found = true;
	                                }
	                                if (!found) {
	                                    quad = false;
	                                }
	                            }
	                            quad = quad && (minmin.pos[0] === minmax.pos[0]);
	                            quad = quad && (maxmin.pos[0] === maxmax.pos[0]);
	                            quad = quad && (minmin.pos[1] === maxmin.pos[1]);
	                            quad = quad && (minmax.pos[1] === maxmax.pos[1]);
	                            if (quad) {
	                                if (minmin.uv[0] < 0.01 && minmin.uv[1] < 0.01) {
	                                    // one vertex color
	                                    exports.ctx.beginPath();
	                                    exports.ctx.rect(minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);
	                                    exports.ctx.fillStyle = `rgba(${v0.col[0] >> 0 & 0xff}, ${v0.col[0] >> 8 & 0xff}, ${v0.col[0] >> 16 & 0xff}, ${(v0.col[0] >> 24 & 0xff) / 0xff})`;
	                                    exports.ctx.fill();
	                                }
	                                else {
	                                    // no vertex color
	                                    const image = draw_cmd.TextureId;
	                                    exports.ctx.drawImage(image, minmin.uv[0] * image.width, minmin.uv[1] * image.height, (maxmax.uv[0] - minmin.uv[0]) * image.width, (maxmax.uv[1] - minmin.uv[1]) * image.height, minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);
	                                    // ctx.beginPath();
	                                    // ctx.rect(minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);
	                                    // ctx.strokeStyle = "yellow";
	                                    // ctx.stroke();
	                                }
	                                i += 3;
	                            }
	                            else {
	                                // one vertex color, no texture
	                                exports.ctx.beginPath();
	                                exports.ctx.moveTo(v0.pos[0], v0.pos[1]);
	                                exports.ctx.lineTo(v1.pos[0], v1.pos[1]);
	                                exports.ctx.lineTo(v2.pos[0], v2.pos[1]);
	                                exports.ctx.closePath();
	                                exports.ctx.fillStyle = `rgba(${v0.col[0] >> 0 & 0xff}, ${v0.col[0] >> 8 & 0xff}, ${v0.col[0] >> 16 & 0xff}, ${(v0.col[0] >> 24 & 0xff) / 0xff})`;
	                                exports.ctx.fill();
	                            }
	                        }
	                        exports.ctx.restore();
	                    }
	                }
	            }
	            idx_buffer_offset += draw_cmd.ElemCount * ImDrawIdxSize;
	        });
	    });
	    // Restore modified GL state
	    exports.gl && (last_program !== null) && exports.gl.useProgram(last_program);
	    exports.gl && (last_texture !== null) && exports.gl.bindTexture(exports.gl.TEXTURE_2D, last_texture);
	    exports.gl && (last_active_texture !== null) && exports.gl.activeTexture(last_active_texture);
	    exports.gl && exports.gl.disableVertexAttribArray(g_AttribLocationPosition);
	    exports.gl && exports.gl.disableVertexAttribArray(g_AttribLocationUV);
	    exports.gl && exports.gl.disableVertexAttribArray(g_AttribLocationColor);
	    exports.gl && (last_array_buffer !== null) && exports.gl.bindBuffer(exports.gl.ARRAY_BUFFER, last_array_buffer);
	    exports.gl && (last_element_array_buffer !== null) && exports.gl.bindBuffer(exports.gl.ELEMENT_ARRAY_BUFFER, last_element_array_buffer);
	    exports.gl && (last_blend_equation_rgb !== null && last_blend_equation_alpha !== null) && exports.gl.blendEquationSeparate(last_blend_equation_rgb, last_blend_equation_alpha);
	    exports.gl && (last_blend_src_rgb !== null && last_blend_src_alpha !== null && last_blend_dst_rgb !== null && last_blend_dst_alpha !== null) && exports.gl.blendFuncSeparate(last_blend_src_rgb, last_blend_src_alpha, last_blend_dst_rgb, last_blend_dst_alpha);
	    exports.gl && (last_enable_blend ? exports.gl.enable(exports.gl.BLEND) : exports.gl.disable(exports.gl.BLEND));
	    exports.gl && (last_enable_cull_face ? exports.gl.enable(exports.gl.CULL_FACE) : exports.gl.disable(exports.gl.CULL_FACE));
	    exports.gl && (last_enable_depth_test ? exports.gl.enable(exports.gl.DEPTH_TEST) : exports.gl.disable(exports.gl.DEPTH_TEST));
	    exports.gl && (last_enable_scissor_test ? exports.gl.enable(exports.gl.SCISSOR_TEST) : exports.gl.disable(exports.gl.SCISSOR_TEST));
	    // glPolygonMode(GL_FRONT_AND_BACK, (GLenum)last_polygon_mode[0]);
	    exports.gl && (last_viewport !== null) && exports.gl.viewport(last_viewport[0], last_viewport[1], last_viewport[2], last_viewport[3]);
	    exports.gl && (last_scissor_box !== null) && exports.gl.scissor(last_scissor_box[0], last_scissor_box[1], last_scissor_box[2], last_scissor_box[3]);
	}
	function CreateFontsTexture() {
	    const io = GetIO();
	    // Backup GL state
	    const last_texture = exports.gl && exports.gl.getParameter(exports.gl.TEXTURE_BINDING_2D);
	    // Build texture atlas
	    // const width: number = 256;
	    // const height: number = 256;
	    // const pixels: Uint8Array = new Uint8Array(4 * width * height).fill(0xff);
	    const { width, height, pixels } = io.Fonts.GetTexDataAsRGBA32(); // Load as RGBA 32-bits (75% of the memory is wasted, but default font is so small) because it is more likely to be compatible with user's existing shaders. If your ImTextureId represent a higher-level concept than just a GL texture id, consider calling GetTexDataAsAlpha8() instead to save on GPU memory.
	    // console.log(`font texture ${width} x ${height} @ ${pixels.length}`);
	    // Upload texture to graphics system
	    g_FontTexture = exports.gl && exports.gl.createTexture();
	    exports.gl && exports.gl.bindTexture(exports.gl.TEXTURE_2D, g_FontTexture);
	    exports.gl && exports.gl.texParameteri(exports.gl.TEXTURE_2D, exports.gl.TEXTURE_MIN_FILTER, exports.gl.LINEAR);
	    exports.gl && exports.gl.texParameteri(exports.gl.TEXTURE_2D, exports.gl.TEXTURE_MAG_FILTER, exports.gl.LINEAR);
	    // gl && gl.pixelStorei(gl.UNPACK_ROW_LENGTH); // WebGL2
	    exports.gl && exports.gl.texImage2D(exports.gl.TEXTURE_2D, 0, exports.gl.RGBA, width, height, 0, exports.gl.RGBA, exports.gl.UNSIGNED_BYTE, pixels);
	    // Store our identifier
	    io.Fonts.TexID = g_FontTexture || { foo: "bar" };
	    // console.log("font texture id", g_FontTexture);
	    if (exports.ctx) {
	        const image_canvas = document.createElement("canvas");
	        image_canvas.width = width;
	        image_canvas.height = height;
	        const image_ctx = image_canvas.getContext("2d");
	        if (image_ctx === null) {
	            throw new Error();
	        }
	        const image_data = image_ctx.getImageData(0, 0, width, height);
	        image_data.data.set(pixels);
	        image_ctx.putImageData(image_data, 0, 0);
	        io.Fonts.TexID = image_canvas;
	    }
	    // Restore modified GL state
	    exports.gl && last_texture && exports.gl.bindTexture(exports.gl.TEXTURE_2D, last_texture);
	}
	function DestroyFontsTexture() {
	    const io = GetIO();
	    io.Fonts.TexID = null;
	    exports.gl && exports.gl.deleteTexture(g_FontTexture);
	    g_FontTexture = null;
	}
	function CreateDeviceObjects() {
	    const vertex_shader = [
	        "uniform mat4 ProjMtx;",
	        "attribute vec2 Position;",
	        "attribute vec2 UV;",
	        "attribute vec4 Color;",
	        "varying vec2 Frag_UV;",
	        "varying vec4 Frag_Color;",
	        "void main() {",
	        "	Frag_UV = UV;",
	        "	Frag_Color = Color;",
	        "	gl_Position = ProjMtx * vec4(Position.xy,0,1);",
	        "}",
	    ];
	    const fragment_shader = [
	        "precision mediump float;",
	        "uniform sampler2D Texture;",
	        "varying vec2 Frag_UV;",
	        "varying vec4 Frag_Color;",
	        "void main() {",
	        "	gl_FragColor = Frag_Color * texture2D(Texture, Frag_UV);",
	        "}",
	    ];
	    g_ShaderHandle = exports.gl && exports.gl.createProgram();
	    g_VertHandle = exports.gl && exports.gl.createShader(exports.gl.VERTEX_SHADER);
	    g_FragHandle = exports.gl && exports.gl.createShader(exports.gl.FRAGMENT_SHADER);
	    exports.gl && exports.gl.shaderSource(g_VertHandle, vertex_shader.join("\n"));
	    exports.gl && exports.gl.shaderSource(g_FragHandle, fragment_shader.join("\n"));
	    exports.gl && exports.gl.compileShader(g_VertHandle);
	    exports.gl && exports.gl.compileShader(g_FragHandle);
	    exports.gl && exports.gl.attachShader(g_ShaderHandle, g_VertHandle);
	    exports.gl && exports.gl.attachShader(g_ShaderHandle, g_FragHandle);
	    exports.gl && exports.gl.linkProgram(g_ShaderHandle);
	    g_AttribLocationTex = exports.gl && exports.gl.getUniformLocation(g_ShaderHandle, "Texture");
	    g_AttribLocationProjMtx = exports.gl && exports.gl.getUniformLocation(g_ShaderHandle, "ProjMtx");
	    g_AttribLocationPosition = exports.gl && exports.gl.getAttribLocation(g_ShaderHandle, "Position") || 0;
	    g_AttribLocationUV = exports.gl && exports.gl.getAttribLocation(g_ShaderHandle, "UV") || 0;
	    g_AttribLocationColor = exports.gl && exports.gl.getAttribLocation(g_ShaderHandle, "Color") || 0;
	    g_VboHandle = exports.gl && exports.gl.createBuffer();
	    g_ElementsHandle = exports.gl && exports.gl.createBuffer();
	    CreateFontsTexture();
	}
	function DestroyDeviceObjects() {
	    DestroyFontsTexture();
	    exports.gl && exports.gl.deleteBuffer(g_VboHandle);
	    g_VboHandle = null;
	    exports.gl && exports.gl.deleteBuffer(g_ElementsHandle);
	    g_ElementsHandle = null;
	    g_AttribLocationTex = null;
	    g_AttribLocationProjMtx = null;
	    g_AttribLocationPosition = -1;
	    g_AttribLocationUV = -1;
	    g_AttribLocationColor = -1;
	    exports.gl && exports.gl.deleteProgram(g_ShaderHandle);
	    g_ShaderHandle = null;
	    exports.gl && exports.gl.deleteShader(g_VertHandle);
	    g_VertHandle = null;
	    exports.gl && exports.gl.deleteShader(g_FragHandle);
	    g_FragHandle = null;
	}

	exports.CreateDeviceObjects = CreateDeviceObjects;
	exports.CreateFontsTexture = CreateFontsTexture;
	exports.DestroyDeviceObjects = DestroyDeviceObjects;
	exports.DestroyFontsTexture = DestroyFontsTexture;
	exports.Init = Init;
	exports.NewFrame = NewFrame;
	exports.RenderDrawData = RenderDrawData;
	exports.Shutdown = Shutdown;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
